Foundational Concepts in Security	Analyze the tradeoffs of balancing key security properties (Confidentiality, Integrity, and Availability).
Foundational Concepts in Security	Describe the concepts of risk, threats, vulnerabilities and attack vectors (including the fact that there is no such thing as perfect security).
Foundational Concepts in Security	Explain the concepts of authentication, authorization, access control.
Foundational Concepts in Security	Explain the concept of trust and trustworthiness.
Foundational Concepts in Security	Describe important ethical issues to consider in computer security, including ethical issues associated with fixing or not fixing vulnerabilities and disclosing or not disclosing vulnerabilities.
Principles of Secure Design	Describe the principle of least privilege and isolation as applied to system design.
Principles of Secure Design	Summarize the principle of fail-safe and deny-by-default.
Principles of Secure Design	Discuss the implications of relying on open design or the secrecy of design for security.
Principles of Secure Design	Explain the goals of end-to-end data security.
Principles of Secure Design	Discuss the benefits of having multiple layers of defenses.
Principles of Secure Design	For each stage in the lifecycle of a product, describe what security considerations should be evaluated.
Principles of Secure Design	Describe the cost and tradeoffs associated with designing security into a product.
Principles of Secure Design	Describe the concept of mediation and the principle of complete mediation.
Principles of Secure Design	Describe standard components for security operations, and explain the benefits of their use instead of re- inventing fundamentals operations.
Principles of Secure Design	Explain the concept of trusted computing including trusted computing base and attack surface and the principle of minimizing trusted computing base.
Principles of Secure Design	Discuss the importance of usability in security mechanism design.
Principles of Secure Design	Describe security issues that arise at boundaries between multiple components.
Principles of Secure Design	Identify the different roles of prevention mechanisms and detection/deterrence mechanisms.
Defensive Programming	Explain why input validation and data sanitization is necessary in the face of adversarial control of the input channel.
Defensive Programming	Explain why you might choose to develop a program in a type-safe language like Java, in contrast to an unsafe programming language like C/C++.
Defensive Programming	Classify common input validation errors, and write correct input validation code.
Defensive Programming	Demonstrate using a high-level programming language how to prevent a race condition from occurring and how to handle an exception.
Defensive Programming	Demonstrate the identification and graceful handling of error conditions.
Defensive Programming	Explain the risks with misusing interfaces with third-party code and how to correctly use third-party code.
Defensive Programming	Discuss the need to update software to fix security vulnerabilities and the lifecycle management of the fix.
Defensive Programming	List examples of direct and indirect information flows.
Defensive Programming	Explain the role of random numbers in security, beyond just cryptography (e.g. password generation, randomized algorithms to avoid algorithmic denial of service attacks).
Defensive Programming	Explain the different types of mechanisms for detecting and mitigating data sanitization errors.
Defensive Programming	Demonstrate how programs are tested for input handling errors.
Defensive Programming	Use static and dynamic tools to identify programming faults.
Defensive Programming	Describe how memory architecture is used to protect runtime attacks.
Threats and Attacks	Describe likely attacker types against a particular system.
Threats and Attacks	Discuss the limitations of malware countermeasures (e.g., signature-based detection, behavioral detection).
Threats and Attacks	Identify instances of social engineering attacks and Denial of Service attacks.
Threats and Attacks	Discuss how Denial of Service attacks can be identified and mitigated.
Threats and Attacks	Describe risks to privacy and anonymity in commonly used applications.
Threats and Attacks	Discuss the concepts of covert channels and other data leakage procedures.
Network Security	Describe the different categories of network threats and attacks.
Network Security	Describe the architecture for public and private key cryptography and how public key infrastructure (PKI) supports network security.
Network Security	Describe virtues and limitations of security technologies at each layer of the network stack.
Network Security	Identify the appropriate defense mechanism(s) and its limitations given a network threat.
Network Security	Discuss security properties and limitations of other non-wired networks.
Network Security	Identify the additional threats faced by non-wired networks.
Network Security	Describe threats that can and cannot be protected against using secure communication channels.
Network Security	Summarize defenses against network censorship.
Network Security	Diagram a network for security.
Cryptography	Describe the purpose of cryptography and list ways it is used in data communications.
Cryptography	Define the following terms: cipher, cryptanalysis, cryptographic algorithm, and cryptology, and describe the two basic methods (ciphers)
	for transforming plain text in cipher text.
Cryptography	Discuss the importance of prime numbers in cryptography and explain their use in cryptographic algorithms.
Cryptography	Explain how public key infrastructure supports digital signing and encryption and discuss the limitations/vulnerabilities.
Cryptography	Use cryptographic primitives and describe their basic properties.
Cryptography	Illustrate how to measure entropy and how to generate cryptographic randomness.
Cryptography	Use public-key primitives and their applications.
Cryptography	Explain how key exchange protocols work and how they fail.
Cryptography	Discuss cryptographic protocols and their properties.
Cryptography	Describe real-world applications of cryptographic primitives and protocols.
Cryptography	Summarize security definitions related to attacks on cryptographic primitives, including attacker capabilities and goals.
Cryptography	Apply appropriate known cryptographic techniques for a given scenario.
Cryptography	Appreciate the dangers of inventing one’s own cryptographic methods.
Cryptography	Describe quantum cryptography and the impact of quantum computing on cryptographic algorithms.
Web Security	Describe the browser security model including same-origin policy and threat models in web security.
Web Security	Discuss the concept of web sessions, secure communication channels such as TLS and importance of secure certificates, authentication including single sign-on such as OAuth and SAML.
Web Security	Describe common types of vulnerabilities and attacks in web applications, and defenses against them.
Web Security	Use client-side security capabilities in an application.
Platform Security	Explain the concept of code integrity and code signing and the scope it applies to.
Platform Security	Discuss the concept of root of trust and the process of secure boot and secure loading.
Platform Security	Describe the mechanism of remote attestation of system integrity.
Platform Security	Summarize the goals and key primitives of TPM.
Platform Security	Identify the threats of plugging peripherals into a device.
Platform Security	Identify physical attacks and countermeasures.
Platform Security	Identify attacks on non-PC hardware platforms.
Platform Security	Discuss the concept and importance of trusted path.
Security Policy and Governance	Describe the concept of privacy including personally private information, potential violations of privacy due to security mechanisms, and describe how privacy protection mechanisms run in conflict with security mechanisms.
Security Policy and Governance	Describe how an attacker can infer a secret by interacting with a database.
Security Policy and Governance	Explain how to set a data backup policy or password refresh policy.
Security Policy and Governance	Discuss how to set a breach disclosure policy.
Security Policy and Governance	Describe the consequences of data retention policies.
Security Policy and Governance	Identify the risks of relying on outsourced manufacturing.
Security Policy and Governance	Identify the risks and benefits of outsourcing to the cloud.
Digital Forensics	Describe what a digital investigation is, the sources of digital evidence, and the limitations of forensics.
Digital Forensics	Explain how to design software to support forensics.
Digital Forensics	Describe the legal requirements for use of seized data.
Digital Forensics	Describe the process of evidence seizure from the time when the requirement was identified to the disposition of the data.
Digital Forensics	Describe how data collection is accomplished and the proper storage of the original and forensics copy.
Digital Forensics	Conduct data collection on a hard drive.
Digital Forensics	Describe a person’s responsibility and liability while testifying as a forensics examiner.
Digital Forensics	Recover data based on a given search term from an imaged system.
Digital Forensics	Reconstruct application history from application artifacts.
Digital Forensics	Reconstruct web browsing history from web artifacts.
Digital Forensics	Capture and interpret network traffic.
Digital Forensics	Discuss the challenges associated with mobile device forensics.
Digital Forensics	Inspect a system (network, computer, or application) for the presence of malware or malicious activity.
Digital Forensics	Apply forensics tools to investigate security breaches.
Digital Forensics	Identify anti-forensic methods.
Secure Software Engineering	Describe the requirements for integrating security into the software development lifecycle.
Secure Software Engineering	Apply the concepts of the Design Principles for Protection Mechanisms, the Principles for Software Security [2], and the Principles for Secure Design [1] on a software development project.
Secure Software Engineering	Develop specifications for a software development effort that fully specify functional requirements and identifies the expected execution paths.
Secure Software Engineering	Describe software development best practices for minimizing vulnerabilities in programming code.
Secure Software Engineering	Conduct a security verification and assessment (static and dynamic) of a software application.
