Basic Analysis	Explain what is meant by “best”, “expected”, and “worst” case behavior of an algorithm.
Basic Analysis	In the context of specific algorithms, identify the characteristics of data and/or other conditions or assumptions that lead to different behaviors.
Basic Analysis	Determine informally the time and space complexity of simple algorithms.
Basic Analysis	State the formal definition of big O.
Basic Analysis	List and contrast standard complexity classes.
Basic Analysis	Perform empirical studies to validate hypotheses about runtime stemming from mathematical analysis  Run algorithms on input of various sizes and compare performance.
Basic Analysis	Give examples that illustrate time-space trade-offs of algorithms.
Basic Analysis	Use big O notation formally to give asymptotic upper bounds on time and space complexity of algorithms.
Basic Analysis	Use big O notation formally to give expected case bounds on time complexity of algorithms.
Basic Analysis	Explain the use of big omega, big theta, and little o notation to describe the amount of work done by an algorithm.
Basic Analysis	Use recurrence relations to determine the time complexity of recursively defined algorithms.
Basic Analysis	Solve elementary recurrence relations, eg, using some form of a Master Theorem.
Algorithmic Strategies 	For each of the strategies (brute-force, greedy, divide-and-conquer, recursive backtracking, and dynamic programming), identify a practical example to which it would apply.
Algorithmic Strategies 	Use a greedy approach to solve an appropriate problem and determine if the greedy rule chosen leads to an optimal solution.
Algorithmic Strategies 	Use a divide-and-conquer algorithm to solve an appropriate problem.
Algorithmic Strategies 	Use recursive backtracking to solve a problem such as navigating a maze.
Algorithmic Strategies 	Use dynamic programming to solve an appropriate problem.
Algorithmic Strategies 	Determine an appropriate algorithmic approach to a problem.
Algorithmic Strategies 	Describe various heuristic problem-solving methods.
Algorithmic Strategies 	Use a heuristic approach to solve an appropriate problem.
Algorithmic Strategies 	Describe the trade-offs between brute force and heuristic strategies.
Algorithmic Strategies 	Describe how a branch-and-bound approach may be used to improve the performance of a heuristic method.
Fundamental Data Structures and Algorithms	Implement basic numerical algorithms.
Fundamental Data Structures and Algorithms	Implement simple search algorithms and explain the differences in their time complexities.
Fundamental Data Structures and Algorithms	Be able to implement common quadratic and O(N log N) sorting algorithms.
Fundamental Data Structures and Algorithms	Describe the implementation of hash tables, including collision avoidance and resolution.
Fundamental Data Structures and Algorithms	Discuss the runtime and memory efficiency of principal algorithms for sorting, searching, and hashing.
Fundamental Data Structures and Algorithms	Discuss factors other than computational efficiency that influence the choice of algorithms, such as programming time, maintainability, and the use of application-specific patterns in the input data.
Fundamental Data Structures and Algorithms	Explain how tree balance affects the efficiency of various binary search tree operations.
Fundamental Data Structures and Algorithms	Solve problems using fundamental graph algorithms, including depth-first and breadth-first search.
Fundamental Data Structures and Algorithms	Demonstrate the ability to evaluate algorithms, to select from a range of possible options, to provide justification for that selection, and to implement the algorithm in a particular context.
Fundamental Data Structures and Algorithms	Describe the heap property and the use of heaps as an implementation of priority queues.
Fundamental Data Structures and Algorithms	Solve problems using graph algorithms, including single-source and all-pairs shortest paths, and at least one minimum spanning tree algorithm.
Fundamental Data Structures and Algorithms	Trace and/or implement a string-matching algorithm.
Basic Automata Computability and Complexity	Discuss the concept of finite state machines.
Basic Automata Computability and Complexity	Design a deterministic finite state machine to accept a specified language.
Basic Automata Computability and Complexity	Generate a regular expression to represent a specified language.
Basic Automata Computability and Complexity	Explain why the halting problem has no algorithmic solution.
Basic Automata Computability and Complexity	Design a context-free grammar to represent a specified language.
Basic Automata Computability and Complexity	Define the classes P and NP.
Basic Automata Computability and Complexity	Explain the significance of NP-completeness.
Advanced Computational Complexity	Define the classes P and NP (Also appears in AL/Basic Automata, Computability, and Complexity).
Advanced Computational Complexity	Define the P-space class and its relation to the EXP class.
Advanced Computational Complexity	Explain the significance of NP-completeness (Also appears in AL/Basic Automata, Computability, and Complexity).
Advanced Computational Complexity	Provide examples of classic NP-complete problems.
Advanced Computational Complexity	Prove that a problem is NP-complete by reducing a classic known NP-complete problem to it.
Advanced Automata Theory and Computability	Determine a language’s place in the Chomsky hierarchy (regular, context-free, recursively enumerable).
Advanced Automata Theory and Computability	Convert among equivalently powerful notations for a language, including among DFAs, NFAs, and regular expressions, and between PDAs and CFGs.
Advanced Automata Theory and Computability	Explain the Church-Turing thesis and its significance.
Advanced Automata Theory and Computability	Explain Rice’s Theorem and its significance.
Advanced Automata Theory and Computability	Provide examples of uncomputable functions.
Advanced Automata Theory and Computability	Prove that a problem is uncomputable by reducing a classic known uncomputable problem to it.
Advanced Data Structures Algorithms and Analysis	Understand the mapping of real-world problems to algorithmic solutions (eg, as graph problems, linear programs, etc).
Advanced Data Structures Algorithms and Analysis	Select and apply advanced algorithmic techniques (eg, randomization, approximation) to solve real problems.
Advanced Data Structures Algorithms and Analysis	Select and apply advanced analysis techniques (eg, amortized, probabilistic, etc) to algorithms.
Digital logic and digital systems	Describe the progression of computer technology components from vacuum tubes to VLSI, from mainframe computer architectures to the organization of warehouse-scale computers.
Digital logic and digital systems	Comprehend the trend of modern computer architectures towards multi-core and that parallelism is inherent in all hardware systems.
Digital logic and digital systems	Explain the implications of the “power wall” in terms of further processor performance improvements and the drive towards harnessing parallelism.
Digital logic and digital systems	Articulate that there are many equivalent representations of computer functionality, including logical expressions and gates, and be able to use mathematical expressions to describe the functions of simple combinational and sequential circuits.
Digital logic and digital systems	Design the basic building blocks of a computer: arithmetic-logic unit (gate-level), registers (gate-level), central processing unit (register transfer-level), memory (register transfer-level).
Digital logic and digital systems	Use CAD tools for capture, synthesis, and simulation to evaluate simple building blocks (eg, arithmetic-logic unit, registers, movement between registers) of a simple computer design.
Digital logic and digital systems	Evaluate the functional and timing diagram behavior of a simple processor implemented at the logic circuit level.
Machine level representation of data	Explain why everything is data, including instructions, in computers.
Machine level representation of data	Explain the reasons for using alternative formats to represent numerical data.
Machine level representation of data	Describe how negative integers are stored in sign-magnitude and twos-complement representations.
Machine level representation of data	Explain how fixed-length number representations affect accuracy and precision.
Machine level representation of data	Describe the internal representation of non-numeric data, such as characters, strings, records, and arrays.
Machine level representation of data	Convert numerical data from one format to another.
Machine level representation of data	Write simple programs at the assembly/machine level for string processing and manipulation.
Assembly level machine organization	Explain the organization of the classical von Neumann machine and its major functional units.
Assembly level machine organization	Describe how an instruction is executed in a classical von Neumann machine, with extensions for threads, multiprocessor synchronization, and SIMD execution.
Assembly level machine organization	Describe instruction level parallelism and hazards, and how they are managed in typical processor pipelines.
Assembly level machine organization	Summarize how instructions are represented at both the machine level and in the context of a symbolic assembler.
Assembly level machine organization	Demonstrate how to map between high-level language patterns into assembly/machine language notations.
Assembly level machine organization	Explain different instruction formats, such as addresses per instruction and variable length vs fixed length formats.
Assembly level machine organization	Explain how subroutine calls are handled at the assembly level.
Assembly level machine organization	Explain the basic concepts of interrupts and I/O operations.
Assembly level machine organization	Write simple assembly language program segments.
Assembly level machine organization	Show how fundamental high-level programming constructs are implemented at the machine-language level.
Memory system organization and architecture	Identify the main types of memory technology (eg, SRAM, DRAM, Flash, magnetic disk) and their relative cost and performance.
Memory system organization and architecture	Explain the effect of memory latency on running time.
Memory system organization and architecture	Describe how the use of memory hierarchy (cache, virtual memory) is used to reduce the effective memory latency.
Memory system organization and architecture	Describe the principles of memory management.
Memory system organization and architecture	Explain the workings of a system with virtual memory management.
Memory system organization and architecture	Compute Average Memory Access Time under a variety of cache and memory configurations and mixes of instruction and data references.
Interfacing and communication	Explain how interrupts are used to implement I/O control and data transfers.
Interfacing and communication	Identify various types of buses in a computer system.
Interfacing and communication	Describe data access from a magnetic disk drive.
Interfacing and communication	Compare common network organizations, such as ethernet/bus, ring, switched vs routed.
Interfacing and communication	Identify the cross-layer interfaces needed for multimedia access and presentation, from image fetch from remote storage, through transport over a communications network, to staging into local memory, and final presentation to a graphical display.
Interfacing and communication	Describe the advantages and limitations of RAID architectures.
Functional organization	Compare alternative implementation of datapaths.
Functional organization	Discuss the concept of control points and the generation of control signals using hardwired or microprogrammed implementations.
Functional organization	Explain basic instruction level parallelism using pipelining and the major hazards that may occur.
Functional organization	Design and implement a complete processor, including datapath and control.
Functional organization	Determine, for a given processor and memory system implementation, the average cycles per instruction.
Multiprocessing and alternative architectures	Discuss the concept of parallel processing beyond the classical von Neumann model.
Multiprocessing and alternative architectures	Describe alternative parallel architectures such as SIMD and MIMD.
Multiprocessing and alternative architectures	Explain the concept of interconnection networks and characterize different approaches.
Multiprocessing and alternative architectures	Discuss the special concerns that multiprocessing systems present with respect to memory management and describe how these are addressed.
Multiprocessing and alternative architectures	Describe the differences between memory backplane, processor memory interconnect, and remote memory via networks, their implications for access latency and impact on program performance.
Performance enhancements	Describe superscalar architectures and their advantages.
Performance enhancements	Explain the concept of branch prediction and its utility.
Performance enhancements	Characterize the costs and benefits of prefetching.
Performance enhancements	Explain speculative execution and identify the conditions that justify it.
Performance enhancements	Discuss the performance advantages that multithreading offered in an architecture along with the factors that make it difficult to derive maximum benefits from this approach.
Performance enhancements	Describe the relevance of scalability to performance.
Introduction to Modeling and Simulation	Explain the concept of modeling and the use of abstraction that allows the use of a machine to solve a problem.
Introduction to Modeling and Simulation	Describe the relationship between modeling and simulation, ie, thinking of simulation as dynamic modeling.
Introduction to Modeling and Simulation	Create a simple, formal mathematical model of a real-world situation and use that model in a simulation.
Introduction to Modeling and Simulation	Differentiate among the different types of simulations, including physical simulations, human-guided simulations, and virtual reality.
Introduction to Modeling and Simulation	Describe several approaches to validating models.
Introduction to Modeling and Simulation	Create a simple display of the results of a simulation.
Modeling and Simulation	Explain and give examples of the benefits of simulation and modeling in a range of important application areas.
Modeling and Simulation	Demonstrate the ability to apply the techniques of modeling and simulation to a range of problem areas.
Modeling and Simulation	Explain the constructs and concepts of a particular modeling approach.
Modeling and Simulation	Explain the difference between validation and verification of a model; demonstrate the difference with specific examples.
Modeling and Simulation	Verify and validate the results of a simulation.
Modeling and Simulation	Evaluate a simulation, highlighting the benefits and the drawbacks.
Modeling and Simulation	Choose an appropriate modeling approach for a given problem or situation.
Modeling and Simulation	Compare results from different simulations of the same situation and explain any differences.
Modeling and Simulation	Infer the behavior of a system from the results of a simulation of the system.
Modeling and Simulation	Extend or adapt an existing model to a new situation.
Processing	Explain the characteristics and defining properties of algorithms and how they relate to machine processing.
Processing	Analyze simple problem statements to identify relevant information and select appropriate processing to solve the problem.
Processing	Identify or sketch a workflow for an existing computational process such as the creation of a graph based on experimental data.
Processing	Describe the process of converting an algorithm to machine-executable code.
Processing	Summarize the phases of software development and compare several common lifecycle models.
Processing	Explain how data is represented in a machine Compare representations of integers to floating point numbers Describe underflow, overflow, round off, and truncation errors in data representations.
Processing	Apply standard numerical algorithms to solve ODEs and PDEs Use computing systems to solve systems of equations.
Processing	Describe the basic properties of bandwidth, latency, scalability and granularity.
Processing	Describe the levels of parallelism including task, data, and event parallelism.
Processing	Compare and contrast parallel programming paradigms recognizing the strengths and weaknesses of each.
Processing	Identify the issues impacting correctness and efficiency of a computation.
Processing	Design, code, test and debug programs for a parallel computation.
Interactive Visualization	Compare common computer interface mechanisms with respect to ease-of-use, learnability, and cost.
Interactive Visualization	Use standard APIs and tools to create visual displays of data, including graphs, charts, tables, and histograms.
Interactive Visualization	Describe several approaches to using a computer as a means for interacting with and processing data.
Interactive Visualization	Extract useful information from a dataset.
Interactive Visualization	Analyze and select visualization techniques for specific problems.
Interactive Visualization	Describe issues related to scaling data analysis from small to large data sets.
Data, Information, and Knowledge	Identify all of the data, information, and knowledge elements and related organizations, for a computational science application.
Data, Information, and Knowledge	Describe how to represent data and information for processing.
Data, Information, and Knowledge	Describe typical user requirements regarding that data, information, and knowledge.
Data, Information, and Knowledge	Select a suitable system or software implementation to manage data, information, and knowledge.
Data, Information, and Knowledge	List and describe the reports, transactions, and other processing needed for a computational science application.
Data, Information, and Knowledge	Compare and contrast database management, information retrieval, and digital library systems with regard to handling typical computational science applications.
Data, Information, and Knowledge	Design a digital library for some computational science users / societies, with appropriate content and services.
Numerical Analysis	Define error, stability, machine precision concepts and the inexactness of computational approximations.
Numerical Analysis	Implement Taylor series, interpolation, extrapolation, and regression algorithms for approximating functions.
Numerical Analysis	Implement algorithms for differentiation and integration.
Numerical Analysis	Implement algorithms for solving differential equations.
Sets, Relations, and Functions	Explain with examples the basic terminology of functions, relations, and sets.
Sets, Relations, and Functions	Perform the operations associated with sets, functions, and relations.
Sets, Relations, and Functions	Relate practical examples to the appropriate set, function, or relation model, and interpret the associated operations and terminology in context.
Basic Logic	Convert logical statements from informal language to propositional and predicate logic expressions.
Basic Logic	Apply formal methods of symbolic propositional and predicate logic, such as calculating validity of formulae and computing normal forms.
Basic Logic	Use the rules of inference to construct proofs in propositional and predicate logic.
Basic Logic	Describe how symbolic logic can be used to model real-life situations or applications, including those arising in computing contexts such as software analysis (eg, program correctness), database queries, and algorithms.
Basic Logic	Apply formal logic proofs and/or informal, but rigorous, logical reasoning to real problems, such as predicting the behavior of software or solving problems such as puzzles.
Basic Logic	Describe the strengths and limitations of propositional and predicate logic.
Proof Techniques	Identify the proof technique used in a given proof.
Proof Techniques	Outline the basic structure of each proof technique (direct proof, proof by contradiction, and induction) described in this unit.
Proof Techniques	Apply each of the proof techniques (direct proof, proof by contradiction, and induction) correctly in the construction of a sound argument.
Proof Techniques	Determine which type of proof is best for a given problem.
Proof Techniques	Explain the parallels between ideas of mathematical and/or structural induction to recursion and recursively defined structures.
Proof Techniques	Explain the relationship between weak and strong induction and give examples of the appropriate use of each.
Proof Techniques	State the well-ordering principle and its relationship to mathematical induction.
Basics of Counting	Apply counting arguments, including sum and product rules, inclusion-exclusion principle and arithmetic/geometric progressions.
Basics of Counting	Apply the pigeonhole principle in the context of a formal proof.
Basics of Counting	Compute permutations and combinations of a set, and interpret the meaning in the context of the particular application.
Basics of Counting	Map real-world applications to appropriate counting formalisms, such as determining the number of ways to arrange people around a table, subject to constraints on the seating arrangement, or the number of ways to determine certain hands in cards (eg, a full house).
Basics of Counting	Solve a variety of basic recurrence relations.
Basics of Counting	Analyze a problem to determine underlying recurrence relations.
Basics of Counting	Perform computations involving modular arithmetic.
Graphs and Trees	Illustrate by example the basic terminology of graph theory, and some of the properties and special cases of each type of graph/tree.
Graphs and Trees	Demonstrate different traversal methods for trees and graphs, including pre, post, and in-order traversal of trees.
Graphs and Trees	Model a variety of real-world problems in computer science using appropriate forms of graphs and trees, such as representing a network topology or the organization of a hierarchical file system.
Graphs and Trees	Show how concepts from graphs and trees appear  in data structures, algorithms, proof techniques (structural induction), and counting.
Graphs and Trees	Explain how to construct a spanning tree of a graph.
Graphs and Trees	Determine if two graphs are isomorphic.
Discrete Probability	Calculate probabilities of events and expectations of random variables for elementary problems such as games of chance.
Discrete Probability	Differentiate between dependent and independent events.
Discrete Probability	Identify a case of the binomial distribution and compute a probability using that distribution.
Discrete Probability	Apply Bayes theorem to determine conditional probabilities in a problem.
Discrete Probability	Apply the tools of probability to solve problems such as the average case analysis of algorithms or analyzing hashing.
Discrete Probability	Compute the variance for a given probability distribution.
Discrete Probability	Explain how events that are independent can be conditionally dependent (and vice-versa)  Identify real-world examples of such cases.
Fundamental Concepts	Identify common uses of digital presentation to humans (eg, computer graphics, sound).
Fundamental Concepts	Explain in general terms how analog signals can be reasonably represented by discrete samples, for example, how images can be represented by pixels.
Fundamental Concepts	Explain how the limits of human perception affect choices about the digital representation of analog signals.
Fundamental Concepts	Construct a simple user interface using a standard API.
Fundamental Concepts	Describe the differences between lossy and lossless image compression techniques, for example as reflected in common graphics image file formats such as  JPG, PNG, MP3, MP4, and GIF.
Fundamental Concepts	Describe color models and their use in graphics display devices.
Fundamental Concepts	Describe the tradeoffs between storing information vs storing enough information to reproduce the information, as in the difference between vector and raster rendering.
Fundamental Concepts	Describe the basic process of producing continuous motion from a sequence of discrete frames (sometimes called “flicker fusion”).
Fundamental Concepts	Describe how double-buffering can remove flicker from animation.
Basic Rendering	Discuss the light transport problem and its relation to numerical integration ie, light is emitted, scatters around the scene, and is measured by the eye.
Basic Rendering	Describe the basic graphics pipeline and how forward and backward rendering factor in this.
Basic Rendering	Create a program to display 3D models of simple graphics images.
Basic Rendering	Derive linear perspective from similar triangles by converting points (x, y, z) to points (x/z, y/z, 1).
Basic Rendering	Obtain 2-dimensional and 3-dimensional points by applying affine transformations.
Basic Rendering	Apply 3-dimensional coordinate system and the changes required to extend 2D transformation operations to handle transformations in 3D.
Basic Rendering	Contrast forward and backward rendering.
Basic Rendering	Explain the concept and applications of texture mapping, sampling, and anti-aliasing.
Basic Rendering	Explain the ray tracing/rasterization duality for the visibility problem.
Basic Rendering	Implement simple procedures that perform transformation and clipping operations on simple 2-dimensional images.
Basic Rendering	Implement a simple real-time renderer using a rasterization API (eg, OpenGL) using vertex buffers and shaders.
Basic Rendering	Compare and contrast the different rendering techniques.
Basic Rendering	Compute space requirements based on resolution and color coding.
Basic Rendering	Compute time requirements based on refresh rates, rasterization techniques.
Geometric Modeling	Represent curves and surfaces using both implicit and parametric forms.
Geometric Modeling	Create simple polyhedral models by surface tessellation.
Geometric Modeling	Generate a mesh representation from an implicit surface.
Geometric Modeling	Generate a fractal model or terrain using a procedural method.
Geometric Modeling	Generate a mesh from data points acquired with a laser scanner.
Geometric Modeling	Construct CSG models from simple primitives, such as cubes and quadric surfaces.
Geometric Modeling	Contrast modeling approaches with respect to space and time complexity and quality of image.
Advanced Rendering	Demonstrate how an algorithm estimates a solution to the rendering equation.
Advanced Rendering	Prove the properties of a rendering algorithm, eg, complete, consistent, and unbiased.
Advanced Rendering	Analyze the bandwidth and computation demands of a simple algorithm.
Advanced Rendering	Implement a non-trivial shading algorithm (eg, toon shading, cascaded shadow maps) under a rasterization API.
Advanced Rendering	Discuss how a particular artistic technique might be implemented in a renderer.
Advanced Rendering	Explain how to recognize the graphics techniques used to create a particular image.
Advanced Rendering	Implement any of the specified graphics techniques using a primitive graphics system at the individual pixel level.
Advanced Rendering	Implement a ray tracer for scenes using a simple (eg, Phong’s) BRDF plus reflection and refraction.
Computer Animation	Compute the location and orientation of model parts using an forward kinematic approach.
Computer Animation	Compute the orientation of articulated parts of a model from a location and orientation using an inverse kinematic approach.
Computer Animation	Describe the tradeoffs in different representations of rotations.
Computer Animation	Implement the spline interpolation method for producing in-between positions and orientations.
Computer Animation	Implement algorithms for physical modeling of particle dynamics using simple Newtonian mechanics, for example Witkin & Kass, snakes and worms, symplectic Euler, Stormer/Verlet, or midpoint Euler methods.
Computer Animation	Discuss the basic ideas behind some methods for fluid dynamics for modeling ballistic trajectories, for example for splashes, dust, fire, or smoke.
Computer Animation	Use common animation software to construct simple organic forms using metaball and skeleton.
Visualization	Describe the basic algorithms for scalar and vector visualization.
Visualization	Describe the tradeoffs of visualization algorithms in terms of accuracy and performance.
Visualization	Propose a suitable visualization design for a particular combination of data characteristics and application tasks.
Visualization	Analyze the effectiveness of a given visualization for a particular task.
Visualization	Design a process to evaluate the utility of a visualization algorithm or system.
Visualization	Recognize a variety of applications of visualization including representations of scientific, medical, and mathematical data; flow visualization; and spatial analysis.
Foundations	Discuss why human-centered software development is important.
Foundations	Summarize the basic precepts of psychological and social interaction.
Foundations	Develop and use a conceptual vocabulary for analyzing human interaction with software: affordance, conceptual model, feedback, and so forth.
Foundations	Define a user-centered design process that explicitly takes account of  the fact that the user is not like the developer or their acquaintances.
Foundations	Create and conduct a simple usability test for an existing software application.
Designing Interaction	For an identified user group, undertake and document an analysis of their needs.
Designing Interaction	Create a simple application, together with help and documentation, that supports a graphical user interface.
Designing Interaction	Conduct a quantitative evaluation and discuss/report the results.
Designing Interaction	Discuss at least one national or international user interface design standard.
Programming Interactive Systems	Explain the importance of Model-View controller to interface programming.
Programming Interactive Systems	Create an application with a modern graphical user interface.
Programming Interactive Systems	Identify commonalities and differences in UIs across different platforms.
Programming Interactive Systems	Explain and use GUI programming concepts: event handling, constraint-based layout management, etc.
User-centered design and testing	Explain how user-centred design complements other software process models.
User-centered design and testing	Use lo-fi (low fidelity) prototyping techniques to gather, and report, user responses.
User-centered design and testing	Choose appropriate methods to support the development of a specific UI.
User-centered design and testing	Use a variety of techniques to evaluate a given UI.
User-centered design and testing	Compare the constraints and benefits of different evaluative methods.
New Interactive Technologies	Describe when non-mouse interfaces are appropriate.
New Interactive Technologies	Understand the interaction possibilities beyond mouse-and-pointer interfaces.
New Interactive Technologies	Discuss the advantages (and disadvantages) of non-mouse interfaces.
Collaboration and communication	Describe the difference between synchronous and asynchronous communication.
Collaboration and communication	Compare the HCI issues in individual interaction with group interaction.
Collaboration and communication	Discuss several issues of social concern raised by collaborative software.
Collaboration and communication	Discuss the HCI issues in software that embodies human intention.
Statistical methods for HCI	Explain basic statistical concepts and their areas of application.
Statistical methods for HCI	Extract and articulate the statistical arguments used in papers that quantitatively report user studies.
Statistical methods for HCI	Design a user study that will yield quantitative results.
Statistical methods for HCI	Conduct and report on a study that utilizes both qualitative and quantitative evaluation.
Human factors and security	Explain the concepts of phishing and spear phishing, and how to recognize them.
Human factors and security	Describe the issues of trust in interface design with an example of a high and low trust system.
Human factors and security	Design a user interface for a security mechanism.
Human factors and security	Explain the concept of identity management and its importance.
Human factors and security	Analyze a security policy and/or procedures to show where they consider, or fail to consider, human factors.
Design-oriented HCI	Explain what is meant by “HCI is a design-oriented discipline”.
Design-oriented HCI	Detail the processes of design appropriate to specific design orientations.
Design-oriented HCI	Apply a variety of design methods to a given problem.
Mixed, Augmented and Virtual Reality	Describe the optical model realized by a computer graphics system to synthesize stereoscopic view.
Mixed, Augmented and Virtual Reality	Describe the principles of different viewer tracking technologies.
Mixed, Augmented and Virtual Reality	Describe the differences between geometry- and image-based virtual reality.
Mixed, Augmented and Virtual Reality	Describe the issues of user action synchronization and data consistency in a networked environment.
Mixed, Augmented and Virtual Reality	Determine the basic requirements on interface, hardware, and software configurations of a VR system for a specified application.
Mixed, Augmented and Virtual Reality	Describe several possible uses for games engines, including their potential and their limitations.
Foundational Concepts in Security	Analyze the tradeoffs of balancing key security properties (Confidentiality, Integrity, Availability).
Foundational Concepts in Security	Describe the concepts of risk, threats, vulnerabilities and attack vectors (including the fact that there is no such thing as perfect security).
Foundational Concepts in Security	Explain the concepts of authentication, authorization, access control.
Foundational Concepts in Security	Explain the concept of trust and trustworthiness.
Foundational Concepts in Security	Recognize that there are important ethical issues to consider in computer security, including ethical issues associated with fixing or not fixing vulnerabilities and disclosing or not disclosing vulnerabilities.
Principles of Secure Design	Describe the principle of least privilege and isolation as applied to system design.
Principles of Secure Design	Summarize the principle of fail-safe and deny-by-default.
Principles of Secure Design	Discuss the implications of relying on open design or the secrecy of design for security. 
Principles of Secure Design	Explain the goals of end-to-end data security.
Principles of Secure Design	Discuss the benefits of having multiple layers of defenses.
Principles of Secure Design	For each stage in the lifecycle of a product, describe what security considerations should be evaluated. 
Principles of Secure Design	Describe the cost and tradeoffs associated with designing security into a product.
Principles of Secure Design	Describe the concept of mediation and the principle of complete mediation.
Principles of Secure Design	Be aware of standard components for security operations, instead of re-inventing fundamentals operations.
Principles of Secure Design	Explain the concept of trusted computing including trusted computing base and attack surface and the principle of minimizing trusted computing base.
Principles of Secure Design	Discuss the importance of usability in security mechanism design.
Principles of Secure Design	Describe security issues that arise at boundaries between multiple components. 
Principles of Secure Design	Identify the different roles of prevention mechanisms and detection/deterrence mechanisms.
Defensive Programming	Explain why input validation and data sanitization is necessary in the face of adversarial control of the input channel. 
Defensive Programming	Explain why you might choose to develop a program in a type-safe language like Java, in contrast to an unsafe programming language like C/C++.
Defensive Programming	Classify common input validation errors, and write correct input validation code.
Defensive Programming	Demonstrate using a high-level programming language how to prevent a race condition from occurring and how to handle an exception.
Defensive Programming	Demonstrate the identification and graceful handling of error conditions.
Defensive Programming	Explain the risks with misusing interfaces with third-party code and how to correctly use third-party code.
Defensive Programming	Discuss the need to update software to fix security vulnerabilities and the lifecycle management of the fix.
Defensive Programming	List examples of direct and indirect information flows.
Defensive Programming	Explain the role of random numbers in security, beyond just cryptography (eg password generation, randomized algorithms to avoid algorithmic denial of service attacks).
Defensive Programming	Explain the different types of mechanisms for detecting and mitigating data sanitization errors.
Defensive Programming	Demonstrate how programs are tested for input handling errors.
Defensive Programming	Use static and dynamic tools to identify programming faults.
Defensive Programming	Describe how memory architecture is used to protect runtime attacks.
Threats and Attacks	Describe likely attacker types against a particular system.
Threats and Attacks	Discuss the limitations of malware countermeasures (eg, signature-based detection, behavioral detection).
Threats and Attacks	Identify instances of social engineering attacks and Denial of Service attacks.
Threats and Attacks	Discuss how Denial of Service attacks can be identified and mitigated.
Threats and Attacks	Describe risks to privacy and anonymity in commonly used applications.
Threats and Attacks	Discuss the concepts of covert channels and other data leakage procedures.
Network Security	Describe the different categories of network threats and attacks.
Network Security	Describe the architecture for public and private key cryptography and how PKI supports network security.
Network Security	Describe virtues and limitations of security technologies at each layer of the network stack.
Network Security	Identify the appropriate defense mechanism(s) and its limitations given a network threat.
Network Security	Discuss security properties and limitations of other  non-wired networks.
Network Security	Identify the additional threats faced by non-wired networks.
Network Security	Describe threats that can and cannot be protected against using secure communication channels.
Network Security	Summarize defenses against network censorship.
Network Security	Diagram a network for security.
Cryptography	Describe the purpose of Cryptography and list ways it is used in data communications.
Cryptography	Define the following terms: Cipher, Cryptanalysis, Cryptographic Algorithm, and Cryptology and describe the two basic methods (ciphers) for transforming plain text in cipher text.
Cryptography	Discuss the importance of prime numbers in cryptography and explain their use in cryptographic algorithms.
Cryptography	Explain how Public Key Infrastructure supports digital signing and encryption and discuss the limitations/vulnerabilities.
Cryptography	Use cryptographic primitives and their basic properties.
Cryptography	Illustrate how to measure entropy and how to generate cryptographic randomness.
Cryptography	Use public-key primitives and their applications.
Cryptography	Explain how key exchange protocols work and how they fail.
Cryptography	Discuss cryptographic protocols and their properties.
Cryptography	Describe real-world applications of cryptographic primitives and protocols.
Cryptography	Summarize precise security definitions, attacker capabilities and goals.
Cryptography	Apply appropriate known cryptographic techniques for a given scenario.
Cryptography	Appreciate the dangers of inventing one’s own cryptographic methods.
Cryptography	Describe quantum cryptography and the impact of quantum computing on cryptographic algorithms.
Web Security	Describe the browser security model including same-origin policy and threat models in web security.
Web Security	Discuss the concept of web sessions, secure communication channels such as TLS and importance of secure certificates, authentication including single sign-on such as OAuth and SAML.
Web Security	Investigate common types of vulnerabilities and attacks in web applications, and defenses against them.
Web Security	Use client-side security capabilities.
Platform Security	Explain the concept of code integrity and code signing and the scope it applies to.
Platform Security	Discuss the concept of root of trust and the process of secure boot and secure loading.
Platform Security	Describe the mechanism of remote attestation of system integrity.
Platform Security	Summarize the goals and key primitives of TPM.
Platform Security	Identify the threats of plugging peripherals into a device.
Platform Security	Identify physical attacks and countermeasures.
Platform Security	Identify attacks on non-PC hardware platforms.
Platform Security	Discuss the concept and importance of trusted path.
Security Policy and Governance	Describe the concept of privacy including personally private information, potential violations of privacy due to security mechanisms, and describe how privacy protection mechanisms run in conflict with security mechanisms.
Security Policy and Governance	Describe how an attacker can infer a secret by interacting with a database.
Security Policy and Governance	Explain how to set a data backup policy or password refresh policy.
Security Policy and Governance	Discuss how to set a breach disclosure policy.
Security Policy and Governance	Describe the consequences of data retention policies.
Security Policy and Governance	Identify the risks of relying on outsourced manufacturing.
Security Policy and Governance	Identify the risks and benefits of outsourcing to the cloud.
Digital Forensics	Describe what is a Digital Investigation is, the sources of digital evidence, and the limitations of forensics.
Digital Forensics	Explain how to design software to support forensics.
Digital Forensics	Describe the legal requirements for use of seized data.
Digital Forensics	Describe the process of evidence seizure from the time when the requirement was identified to the disposition of the data.
Digital Forensics	Describe how data collection is accomplished and the proper storage of the original and forensics copy.
Digital Forensics	Conduct data collection on a hard drive.
Digital Forensics	Describe a person’s responsibility and liability while testifying as a forensics examiner.
Digital Forensics	Recover data based on a given search term from an imaged system.
Digital Forensics	Reconstruct application history from application artifacts.
Digital Forensics	Reconstruct web browsing history from web artifacts.
Digital Forensics	Capture and interpret network traffic.
Digital Forensics	Discuss the challenges associated with mobile device forensics.
Digital Forensics	Inspect a system (network, computer, or application) for the presence of malware or malicious activity.
Digital Forensics	Apply forensics tools to investigate security breaches.
Digital Forensics	Identify anti-forensic methods.
Secure Software Engineering	Describe the requirements for integrating security into the SDL.
Secure Software Engineering	Apply the concepts of the Design Principles for Protection Mechanisms, the Principles for Software Security (Viega and McGraw), and the Principles for Secure Design (Morrie Gasser) on a software development project.
Secure Software Engineering	Develop specifications for a software development effort that fully specify functional requirements and identifies the expected execution paths.
Secure Software Engineering	Describe software development best practices for minimizing vulnerabilities in programming code.
Secure Software Engineering	Conduct a security verification and assessment (static and dynamic) of a software application.
Information Management Concepts	Describe how humans gain access to information and data to support their needs.
Information Management Concepts	Describe the advantages and disadvantages of central organizational control over data. 
Information Management Concepts	Identify the careers/roles associated with information management (eg, database administrator, data modeler, application developer, end-user).
Information Management Concepts	Compare and contrast information with data and knowledge.
Information Management Concepts	Demonstrate uses of explicitly stored metadata/schema associated with data.
Information Management Concepts	Identify issues of data persistence for an organization.
Information Management Concepts	Critique an information application with regard to satisfying user information needs.
Information Management Concepts	Explain uses of declarative queries.
Information Management Concepts	Give a declarative version for a navigational query.
Information Management Concepts	Describe several technical solutions to the problems related to information privacy, integrity, security, and preservation.
Information Management Concepts	Explain measures of efficiency (throughput, response time) and effectiveness (recall, precision).
Information Management Concepts	Describe approaches to scale up information systems.
Information Management Concepts	Identify vulnerabilities and failure scenarios in common forms of information systems.
Database Systems	Explain the characteristics that distinguish the database approach from the approach of programming with data files.
Database Systems	Describe the most common designs for core database system components including the query optimizer, query executor, storage manager, access methods, and transaction processor.
Database Systems	Cite the basic goals, functions, and models of database systems.
Database Systems	Describe the components of a database system and give examples of their use.
Database Systems	Identify major DBMS functions and describe their role in a database system.
Database Systems	Explain the concept of data independence and its importance in a database system.
Database Systems	Use a declarative query language to elicit information from a database.
Database Systems	Describe facilities that datatbases provide supporting structures and/or stream (sequence) data, eg, text.
Database Systems	Describe major approaches to storing and processing large volumes of data.
Data Modeling	Compare and contrast appropriate data models, including internal structures, for different types of data.
Data Modeling	Describe concepts in modeling notation (eg, Entity-Relation Diagrams or UML) and how they would be used.
Data Modeling	Define the fundamental terminology used in the relational data model.
Data Modeling	Describe the basic principles of the relational data model.
Data Modeling	Apply the modeling concepts and notation of the relational data model.
Data Modeling	Describe the main concepts of the OO model such as object identity, type constructors, encapsulation, inheritance, polymorphism, and versioning.
Data Modeling	Describe the differences between relational and semi-structured data models.
Data Modeling	Give a semi-structured equivalent (eg, in DTD or XML Schema) for a given relational schema.
Indexing	Generate an index file for a collection of resources.
Indexing	Explain the role of an inverted index in locating a document in a collection.
Indexing	Explain how stemming and stop words affect indexing.
Indexing	Identify appropriate indices for given relational schema and query set.
Indexing	Estimate time to retrieve information, when indices are used compared to when they are not used.
Indexing	Describe key challenges in web crawling, eg, detecting duplicate documents, determining the crawling frontier.
Relational Databases	Prepare a relational schema from a conceptual model developed using the entity- relationship model.
Relational Databases	Explain and demonstrate the concepts of entity integrity constraint and referential integrity constraint (including definition of the concept of a foreign key).
Relational Databases	Demonstrate use of the relational algebra operations from mathematical set theory (union, intersection, difference, and Cartesian product) and the relational algebra operations developed specifically for relational databases (select (restrict), project, join, and division).
Relational Databases	Write queries in the relational algebra.
Relational Databases	Write queries in the tuple relational calculus.
Relational Databases	Determine the functional dependency between two or more attributes that are a subset of a relation.
Relational Databases	Connect constraints expressed as primary key and foreign key, with functional dependencies.
Relational Databases	Compute the closure of a set of attributes under given functional dependencies.
Relational Databases	Determine whether a set of attributes form a superkey and/or candidate key for a relation with given functional dependencies.
Relational Databases	Evaluate a proposed decomposition, to say whether it has lossless-join and dependency-preservation.
Relational Databases	Describe the properties of BCNF, PJNF, 5NF.
Relational Databases	Explain the impact of normalization on the efficiency of database operations especially query optimization.
Relational Databases	Describe what is a multi-valued dependency and what type of constraints it specifies.
Query Languages	Create a relational database schema in SQL that incorporates key, entity integrity, and referential integrity constraints.
Query Languages	Use SQL to create tables and retrieve (SELECT) information from a database.
Query Languages	Evaluate a set of query processing strategies and select the optimal strategy.
Query Languages	Create a non-procedural query by filling in templates of relations to construct an example of the desired query result.
Query Languages	Embed object-oriented queries into a stand-alone language such as C++ or Java (eg, SELECT ColMethod() FROM Object).
Query Languages	Write a stored procedure that deals with parameters and has some control flow, to provide a given functionality.
Transaction Processing	Create a transaction by embedding SQL into an application program.
Transaction Processing	Explain the concept of implicit commits.
Transaction Processing	Describe the issues specific to efficient transaction execution.
Transaction Processing	Explain when and why rollback is needed and how logging assures proper rollback.
Transaction Processing	Explain the effect of different isolation levels on the concurrency control mechanisms.
Transaction Processing	Choose the proper isolation level for implementing a specified transaction protocol.
Transaction Processing	Identify appropriate transaction boundaries in application programs.
Distributed Databases	Explain the techniques used for data fragmentation, replication, and allocation during the distributed database design process.
Distributed Databases	Evaluate simple strategies for executing a distributed query to select the strategy that minimizes the amount of data transfer.
Distributed Databases	Explain how the two-phase commit protocol is used to deal with committing a transaction that accesses databases stored on multiple nodes.
Distributed Databases	Describe distributed concurrency control based on the distinguished copy techniques and the voting method.
Distributed Databases	Describe the three levels of software in the client-server model.
Physical Database Design	Explain the concepts of records, record types, and files, as well as the different techniques for placing file records on disk.
Physical Database Design	Give examples of the application of primary, secondary, and clustering indexes.
Physical Database Design	Distinguish between a non-dense index and a dense index.
Physical Database Design	Implement dynamic multilevel indexes using B-trees.
Physical Database Design	Explain the theory and application of internal and external hashing techniques.
Physical Database Design	Use hashing to facilitate dynamic file expansion.
Physical Database Design	Describe the relationships among hashing, compression, and efficient database searches.
Physical Database Design	Evaluate costs and benefits of various hashing schemes.
Physical Database Design	Explain how physical database design affects database transaction efficiency.
Data Mining	Compare and contrast different uses of data mining as evidenced in both research and application.
Data Mining	Explain the value of finding associations in market basket data.
Data Mining	Characterize the kinds of patterns that can be discovered by association rule mining.
Data Mining	Describe how to extend a relational system to find patterns using association rules.
Data Mining	Evaluate different methodologies for effective application of data mining.
Data Mining	Identify and characterize sources of noise, redundancy, and outliers in presented data.
Data Mining	Identify mechanisms (on-line aggregation, anytime behavior, interactive visualization) to close the loop in the data mining process.
Data Mining	Describe why the various close-the-loop processes improve the effectiveness of data mining.
Information Storage and Retrieval	Explain basic information storage and retrieval concepts.
Information Storage and Retrieval	Describe what issues are specific to efficient information retrieval.
Information Storage and Retrieval	Give applications of alternative search strategies and explain why the particular search strategy is appropriate for the application.
Information Storage and Retrieval	Design and implement a small to medium size information storage and retrieval system, or digital library.
Information Storage and Retrieval	Describe some of the technical solutions to the problems related to archiving and preserving information in a digital library.
Multimedia Systems	Describe the media and supporting devices commonly associated with multimedia information and systems.
Multimedia Systems	Demonstrate the use of content-based information analysis in a multimedia information system.
Multimedia Systems	Critique multimedia presentations in terms of their appropriate use of audio, video, graphics, color, and other information presentation concepts.
Multimedia Systems	Implement a multimedia application using an authoring system.
Multimedia Systems	For each of several media or multimedia standards, describe in non-technical language what the standard calls for, and explain how aspects of human perception might be sensitive to the limitations of that standard.
Multimedia Systems	Describe the characteristics of a computer system (including identification of support tools and appropriate standards) that has to host the implementation of one of a range of possible multimedia applications.
Fundamental Issues	Describe Turing test and the “Chinese Room” thought experiment.
Fundamental Issues	Differentiate between the concepts of optimal reasoning/behavior and human-like reasoning/behavior.
Fundamental Issues	Determing the characteristics of a given problem that an intelligent systems must solve.
Basic Search Strategies	Formulate an efficient problem space for a problem expressed in natural language (eg, English) in terms of initial and goal states, and operators.
Basic Search Strategies	Describe the role of heuristics and describe the trade-offs among completeness, optimality, time complexity, and space complexity.
Basic Search Strategies	Describe the problem of combinatorial explosion of search space and its consequences.
Basic Search Strategies	Select and implement an appropriate uninformed search algorithm for a problem, and characterize its time and space complexities.
Basic Search Strategies	Select and implement an appropriate informed search algorithm for a problem by designing the necessary heuristic evaluation function.
Basic Search Strategies	Evaluate whether a heuristic for a given problem is admissible/can guarantee optimal solution.
Basic Search Strategies	Formulate a problem specified in natural language (eg, English) as a constraint satisfaction problem and implement it using a chronological backtracking algorithm or stochastic local search.
Basic Search Strategies	Compare and contrast basic search issues with game playing issues.
Basic Knowledge Representation and Reasoning	Translate a natural language (eg, English) sentence into predicate logic statement.
Basic Knowledge Representation and Reasoning	Convert a logic statement into clause form.
Basic Knowledge Representation and Reasoning	Apply resolution to a set of logic statements to answer a query.
Basic Knowledge Representation and Reasoning	Make a probabilistic inference in a real-world problem using Bayes’ theorem to determine the probability of a hypothesis given evidence.
Basic Machine Learning	List the differences among the three main styles of learning: supervised, reinforcement, and unsupervised.
Basic Machine Learning	Identify examples of classification tasks, including the available input features and output to be predicted.
Basic Machine Learning	Explain the difference between inductive and deductive learning.
Basic Machine Learning	Describe over-fitting in the context of a problem.
Basic Machine Learning	Apply the simple statistical learning algorithm such as Naive Bayesian Classifier to a classification task and measure the classifier's accuracy.
Advanced Search	Design and implement a genetic algorithm solution to a problem.
Advanced Search	Design and implement a simulated annealing schedule to avoid local minima in a problem.
Advanced Search	Design and implement A*/beam search to solve a problem.
Advanced Search	Apply minimax search with alpha-beta pruning to prune search space in a two-player game.
Advanced Search	Compare and contrast genetic algorithms with classic search techniques.
Advanced Search	Compare and contrast various heuristic searches vis-a-vis applicability to a given problem.
Advanced Represenation and Reasoning	Compare and contrast the most common models used for structured knowledge representation, highlighting their strengths and weaknesses.
Advanced Represenation and Reasoning	Identify the components of non-monotonic reasoning and its usefulness as a representational mechanisms for belief systems.
Advanced Represenation and Reasoning	Compare and contrast the basic techniques for representing uncertainty.
Advanced Represenation and Reasoning	Compare and contrast the basic techniques for qualitative representation.
Advanced Represenation and Reasoning	Apply situation and event calculus to problems of action and change.
Advanced Represenation and Reasoning	Explain the distinction between temporal and spatial reasoning, and how they interrelate.
Advanced Represenation and Reasoning	Explain the difference between rule-based, case-based and model-based reasoning techniques.
Advanced Represenation and Reasoning	Define the concept of a planning system and how it differs from classical search techniques.
Advanced Represenation and Reasoning	Describe the differences between planning as search, operator-based planning, and propositional planning, providing examples of domains where each is most applicable.
Advanced Represenation and Reasoning	Explain the distinction between monotonic and non-monotonic inference.
Reasoning Under Uncertainty	Apply Bayes’ rule to determine the probability of a hypothesis given evidence.
Reasoning Under Uncertainty	Explain how conditional independence assertions allow for greater efficiency of probabilistic systems.
Reasoning Under Uncertainty	Identify examples of knowledge representations for reasoning under uncertainty.
Reasoning Under Uncertainty	State the complexity of exact inference  Identify methods for approximate inference.
Reasoning Under Uncertainty	Design and implement at least one knowledge representation for reasoning under uncertainty.
Reasoning Under Uncertainty	Describe the complexities of temporal probabilistic reasoning.
Reasoning Under Uncertainty	Design and implement an HMM as one example of a temporal probabilistic system.
Reasoning Under Uncertainty	Describe the relationship between preferences and utility functions.
Reasoning Under Uncertainty	Explain how utility functions and probabilistic reasoning can be combined to make rational decisions.
Agents	List the defining characteristics of an intelligent agent.
Agents	Characterize and contrast the standard agent architectures.
Agents	Describe the applications of agent theory to domains such as software agents, personal assistants, and believable agents.
Agents	Describe the primary paradigms used by learning agents.
Agents	Demonstrate using appropriate examples how multi-agent systems support agent interaction.
Natural Language Processing	Define and contrast deterministic and stochastic grammars, providing examples to show the adequacy of each.
Natural Language Processing	Simulate, apply, or implement classic and stochastic algorithms for parsing natural language.
Natural Language Processing	Identify the challenges of representing meaning.
Natural Language Processing	List the advantages of using standard corpora  Identify examples of current corpora for a variety of NLP tasks.
Natural Language Processing	Identify techniques for information retrieval, language translation, and text classification.
Advanced Machine Learning	Explain the differences among the three main styles of learning: supervised, reinforcement, and unsupervised.
Advanced Machine Learning	Implement simple algorithms for supervised learning, reinforcement learning, and unsupervised learning.
Advanced Machine Learning	Determine which of the three learning styles is appropriate to a particular problem domain.
Advanced Machine Learning	Compare and contrast each of the following techniques, providing examples of when each strategy is superior: decision trees, neural networks, and belief networks.
Advanced Machine Learning	Evaluate the performance of a simple learning system on a real-world dataset.
Advanced Machine Learning	Characterize the state of the art in learning theory, including its achievements and its shortcomings.
Advanced Machine Learning	Explain the problem of overfitting, along with techniques for detecting and managing the problem.
Robotics	List capabilities and limitations of today's state-of-the-art robot systems, including their sensors and the crucial sensor processing that informs those systems.
Robotics	Integrate sensors, actuators, and software into a robot designed to undertake some task.
Robotics	Program a robot to accomplish simple tasks using deliberative, reactive, and/or hybrid control architectures.
Robotics	Implement fundamental motion planning algorithms within a robot configuration space.
Robotics	Characterize the uncertainties associated with common robot sensors and actuators; articulate strategies for mitigating these uncertainties.
Robotics	List the differences among robots' representations of their external environment, including their strengths and shortcomings.
Robotics	Compare and contrast at least three strategies for robot navigation within known and/or unknown environments, including their strengths and shortcomings.
Robotics	Describe at least one approach for coordinating the actions and sensing of several robots to accomplish a single task.
Perception and Computer Vision	Summarize the importance of image and object recognition in AI and indicate several significant applications of this technology.
Perception and Computer Vision	List at least three image-segmentation approaches, such as thresholding, edge-based and region-based algorithms, along with their defining characteristics, strengths, and weaknesses.
Perception and Computer Vision	Implement 2d object recognition based on contour- and/or region-based shape representations.
Perception and Computer Vision	Distinguish the goals of sound-recognition, speech-recognition, and speaker-recognition and identify how the raw audio signal will be handled differently in each of these cases.
Perception and Computer Vision	Provide at least two examples of a transformation of a data source from one sensory domain to another, eg, tactile data interpreted as single-band 2d images.
Perception and Computer Vision	Implement a feature-extraction algorithm on real data, eg, an edge or corner detector for images or vectors of Fourier coefficients describing a short slice of audio signal.
Perception and Computer Vision	Implement an algorithm combining features into higher-level percepts, eg, a contour or polygon from visual primitives or phoneme hypotheses from an audio signal.
Perception and Computer Vision	Implement a classification algorithm that segments input percepts into output categories and quantitatively evaluates the resulting classification.
Perception and Computer Vision	Evaluate the performance of the underlying feature-extraction, relative to at least one alternative possible approach (whether implemented or not) in its contribution to the classification task (8), above.
Perception and Computer Vision	Describe at least three classification approaches, their prerequisites for applicability, their strengths, and their shortcomings.
Introduction	Articulate the organization of the Internet.
Introduction	List and define the appropriate network terminology.
Introduction	Describe the layered structure of a typical networked architecture.
Introduction	Identify the different types of complexity in a network (edges, core, etc).
Networked Applications	List the differences and the relations between names and addresses in a network.
Networked Applications	Define the principles behind naming schemes and resource location.
Networked Applications	Implement a simple client-server socket-based application.
Reliable Data Delivery	Describe the operation of reliable delivery protocols.
Reliable Data Delivery	List the factors that affect the performance of reliable delivery protocols.
Reliable Data Delivery	Design and implement a simple reliable protocol.
Routing and Forwarding	Describe the organization of the network layer.
Routing and Forwarding	Describe how packets are forwarded in an IP network.
Routing and Forwarding	List the scalability benefits of hierarchical addressing.
Local Area Networks	Describe how frames are forwarded in an Ethernet network.
Local Area Networks	Describe the differences between IP and Ethernet.
Local Area Networks	Describe the interrelations between IP and Ethernet.
Local Area Networks	Describe the steps used in one common approach to the multiple access problem.
Resource Allocation	Describe how resources can be allocated in a network.
Resource Allocation	Describe the congestion problem in a large network.
Resource Allocation	Compare and contrast fixed and dynamic allocation techniques.
Resource Allocation	Compare and contrast current approaches to congestion.
Mobility	Describe the organization of a wireless network.
Mobility	Describe how wireless networks support mobile users.
Social Networking	Discuss the key principles (such as membership, trust) of social networking.
Social Networking	Describe how existing social networks operate.
Social Networking	Construct a social network graph from network data.
Social Networking	Analyze a social network to determine who the key people are.
Social Networking	Evaluate a given interpretation of a social network question with associated data.
Overview of Operating Systems	Explain the objectives and functions of modern operating systems.
Overview of Operating Systems	Analyze the tradeoffs inherent in operating system design.
Overview of Operating Systems	Describe the functions of a contemporary operating system with respect to convenience, efficiency, and the ability to evolve.
Overview of Operating Systems	Discuss networked, client-server, distributed operating systems and how they differ from single user operating systems.
Overview of Operating Systems	Identify potential threats to operating systems and the security features design to guard against them.
Operating System Principles	Explain the concept of a logical layer.
Operating System Principles	Explain the benefits of building abstract layers in hierarchical fashion.
Operating System Principles	Describe the value of APIs and middleware.
Operating System Principles	Describe how computing resources are used by application software and managed by system software.
Operating System Principles	Contrast kernel and user mode in an operating system.
Operating System Principles	Discuss the advantages and disadvantages of using interrupt processing.
Operating System Principles	Explain the use of a device list and driver I/O queue.
Concurrency	Describe the need for concurrency within the framework of an operating system.
Concurrency	Demonstrate the potential run-time problems arising from the concurrent operation of many separate tasks.
Concurrency	Summarize the range of mechanisms that can be employed at the operating system level to realize concurrent systems and describe the benefits of each.
Concurrency	Explain the different states that a task may pass through and the data structures needed to support the management of many tasks.
Concurrency	Summarize techniques for achieving synchronization in an operating system (eg, describe how to implement a semaphore using OS primitives).
Concurrency	Describe reasons for using interrupts, dispatching, and context switching to support concurrency in an operating system.
Concurrency	Create state and transition diagrams for simple problem domains.
Scheduling and Dispatch	Compare and contrast the common algorithms used for both preemptive and non-preemptive scheduling of tasks in operating systems, such as priority, performance comparison, and fair-share schemes.
Scheduling and Dispatch	Describe relationships between scheduling algorithms and application domains.
Scheduling and Dispatch	Discuss the types of processor scheduling such as short-term, medium-term, long-term, and I/O.
Scheduling and Dispatch	Describe the difference between processes and threads.
Scheduling and Dispatch	Compare and contrast static and dynamic approaches to real-time scheduling.
Scheduling and Dispatch	Discuss the need for preemption and deadline scheduling.
Scheduling and Dispatch	Identify ways that the logic embodied in scheduling algorithms are applicable to other domains, such as disk I/O, network scheduling, project scheduling, and problems beyond computing.
Memory Management	Explain memory hierarchy and cost-performance trade-offs.
Memory Management	Summarize the principles of virtual memory as applied to caching and paging.
Memory Management	Evaluate the trade-offs in terms of memory size (main memory, cache memory, auxiliary memory) and processor speed.
Memory Management	Defend the different ways of allocating memory to tasks, citing the relative merits of each.
Memory Management	Describe the reason for and use of cache memory (performance and proximity, different dimension of how caches complicate isolation and VM abstraction).
Memory Management	Discuss the concept of thrashing, both in terms of the reasons it occurs and the techniques used to recognize and manage the problem.
Security and Protection	Articulate the need for protection and security in an OS (cross reference IAS/Security Architecture and Systems Administration/Investigating Operating Systems Security for various systems).
Security and Protection	Summarize the features and limitations of an operating system used to provide protection and security (cross reference IAS/Security Architecture and Systems Administration).
Security and Protection	Explain the mechanisms available in an OS to control access to resources (cross reference IAS/Security Architecture and Systems Administration/Access Control/Configuring systems to operate securely as an IT system).
Security and Protection	Carry out simple system administration tasks according to a security policy, for example creating accounts, setting permissions, applying patches, and arranging for regular backups (cross reference IAS/Security Architecture and Systems Administration ).
Virtual Machines	Explain the concept of virtual memory and how it is realized in hardware and software.
Virtual Machines	Differentiate emulation and isolation.
Virtual Machines	Evaluate virtualization trade-offs.
Virtual Machines	Discuss hypervisors and the need for them in conjunction with different types of hypervisors.
Device Management	Explain the key difference between serial and parallel devices and identify the conditions in which each is appropriate.
Device Management	Identify the relationship between the physical hardware and the virtual devices maintained by the operating system.
Device Management	Explain buffering and describe strategies for implementing it.
Device Management	Differentiate the mechanisms used in interfacing a range of devices (including hand-held devices, networks, multimedia) to a computer and explain the implications of these for the design of an operating system.
Device Management	Describe the advantages and disadvantages of direct memory access and discuss the circumstances in which its use is warranted.
Device Management	Identify the requirements for failure recovery.
Device Management	Implement a simple device driver for a range of possible devices.
File Systems	Describe the choices to be made in designing file systems.
File Systems	Compare and contrast different approaches to file organization, recognizing the strengths and weaknesses of each.
File Systems	Summarize how hardware developments have led to changes in the priorities for the design and the management of file systems.
File Systems	Summarize the use of journaling and how log-structured file systems enhance fault tolerance.
Real Time and Embedded Systems	Describe what makes a system a real-time system.
Real Time and Embedded Systems	Explain the presence of and describe the characteristics of latency in real-time systems.
Real Time and Embedded Systems	Summarize special concerns that real-time systems present, including risk, and how these concerns are addressed.
Fault Tolerance	Explain the relevance of the terms fault tolerance, reliability, and availability.
Fault Tolerance	Outline the range of methods for implementing fault tolerance in an operating system.
Fault Tolerance	Explain how an operating system can continue functioning after a fault occurs.
System Performance Evaluation	Describe the performance measurements used to determine how a system performs.
System Performance Evaluation	Explain the main evaluation models used to evaluate a system.
Introduction	Describe how platform-based development differs from general purpose programming.
Introduction	List characteristics of platform languages.
Introduction	Write and execute a simple platform-based program.
Introduction	List the advantages and disadvantages of programming with platform constraints.
Web Platforms	Design and Implement a simple web application.
Web Platforms	Describe the constraints that the web puts on developers.
Web Platforms	Compare and contrast web programming with general purpose programming.
Web Platforms	Describe the differences between Software-as-a-Service and traditional software products.
Web Platforms	Discuss how web standards impact software development.
Web Platforms	Review an existing web application against a current web standard.
Mobile Platforms	Design and implement a mobile application for a given mobile platform.
Mobile Platforms	Discuss the constraints that mobile platforms put on developers.
Mobile Platforms	Discuss the performance vs power tradeoff.
Mobile Platforms	Compare and Contrast mobile programming with general purpose programming.
Industrial Platforms	Design and implement an industrial application on a given platform (eg, using Lego Mindstorms or Matlab).
Industrial Platforms	Compare and contrast domain specific languages with general purpose programming languages.
Industrial Platforms	Discuss the constraints that a given industrial platforms impose on developers.
Game Platforms	Design and Implement a simple application on a game platform.
Game Platforms	Describe the constraints that game platforms impose on developers.
Game Platforms	Compare and contrast game programming with general purpose programming.
Parallelism Fundamentals	Distinguish using computational resources for a faster answer from managing efficient access to a shared resource.
Parallelism Fundamentals	Distinguish multiple sufficient programming constructs for synchronization that may be inter-implementable but have complementary advantages.
Parallelism Fundamentals	Distinguish data races from higher level races.
Parallel Decomposition	Explain why synchronization is necessary in a specific parallel program.
Parallel Decomposition	Identify opportunities to partition a serial program into independent parallel modules.
Parallel Decomposition	Write a correct and scalable parallel algorithm.
Parallel Decomposition	Parallelize an algorithm by applying task-based decomposition.
Parallel Decomposition	Parallelize an algorithm by applying data-parallel decomposition.
Parallel Decomposition	Write a program using actors and/or reactive processes.
Communication and Coordination	Use mutual exclusion to avoid a given race condition.
Communication and Coordination	Give an example of an ordering of accesses among concurrent activities (eg, program with a data race) that is not sequentially consistent.
Communication and Coordination	Give an example of a scenario in which blocking message sends can deadlock.
Communication and Coordination	Explain when and why multicast or event-based messaging can be preferable to alternatives.
Communication and Coordination	Write a program that correctly terminates when all of a set of concurrent tasks have completed.
Communication and Coordination	Use a properly synchronized queue to buffer data passed among activities.
Communication and Coordination	Explain why checks for preconditions, and actions based on these checks, must share the same unit of atomicity to be effective.
Communication and Coordination	Write a test program that can reveal a concurrent programming error; for example, missing an update when two activities both try to increment a variable.
Communication and Coordination	Describe at least one design technique for avoiding liveness failures in programs using multiple locks or semaphores.
Communication and Coordination	Describe the relative merits of optimistic versus conservative concurrency control under different rates of contention among updates.
Communication and Coordination	Give an example of a scenario in which an attempted optimistic update may never complete.
Communication and Coordination	Use semaphores or condition variables to block threads until a necessary precondition holds.
Parallel Algorithms, Analysis, and Programming	Define “critical path”, “work”, and “span”.
Parallel Algorithms, Analysis, and Programming	Compute the work and span, and determine the critical path with respect to a parallel execution diagram.
Parallel Algorithms, Analysis, and Programming	Define “speed-up” and explain the notion of an algorithm’s scalability in this regard.
Parallel Algorithms, Analysis, and Programming	Identify independent tasks in a program that may be parallelized.
Parallel Algorithms, Analysis, and Programming	Characterize features of a workload that allow or prevent it from being naturally parallelized.
Parallel Algorithms, Analysis, and Programming	Implement a parallel divide-and-conquer (and/or graph algorithm) and empirically measure its performance relative to its sequential analog.
Parallel Algorithms, Analysis, and Programming	Decompose a problem (eg, counting the number of occurrences of some word in a document) via map and reduce operations.
Parallel Algorithms, Analysis, and Programming	Provide an example of a problem that fits the producer-consumer paradigm.
Parallel Algorithms, Analysis, and Programming	Give examples of problems where pipelining would be an effective means of parallelization.
Parallel Algorithms, Analysis, and Programming	Implement a parallel matrix algorithm.
Parallel Algorithms, Analysis, and Programming	Identify issues that arise in producer-consumer algorithms and mechanisms that may be used for addressing them.
Parallel Architecture	Explain the differences between shared and distributed memory.
Parallel Architecture	Describe the SMP architecture and note its key features.
Parallel Architecture	Characterize the kinds of tasks that are a natural match for SIMD machines.
Parallel Architecture	Describe the advantages and limitations of GPUs vs CPUs.
Parallel Architecture	Explain the features of each classification in Flynn’s taxonomy.
Parallel Architecture	Describe assembly-level support for atomic operations.
Parallel Architecture	Describe the challenges in maintaining cache coherence.
Parallel Architecture	Describe the key performance challenges in different memory and distributed system topologies.
Parallel Performance	Detect and correct a load imbalance.
Parallel Performance	Calculate the implications of Amdahl’s law for a particular parallel algorithm (cross-reference SF/Evaluation for Amdahl’s Law).
Parallel Performance	Describe how data distribution/layout can affect an algorithm’s communication costs.
Parallel Performance	Detect and correct an instance of false sharing.
Parallel Performance	Explain the impact of scheduling on parallel performance.
Parallel Performance	Explain performance impacts of data locality.
Parallel Performance	Explain the impact and trade-off related to power usage on parallel performance.
Distributed Systems	Distinguish network faults from other kinds of failures.
Distributed Systems	Explain why synchronization constructs such as simple locks are not useful in the presence of distributed faults.
Distributed Systems	Write a program that performs any required marshalling and conversion into message units, such as packets, to communicate interesting data between two hosts.
Distributed Systems	Measure the observed throughput and response latency across hosts in a given network.
Distributed Systems	Explain why no distributed system can be simultaneously consistent, available, and partition tolerant.
Distributed Systems	Implement a simple server -- for example, a spell checking service.
Distributed Systems	Explain the tradeoffs among overhead, scalability, and fault tolerance when choosing a stateful v stateless design for a given service.
Distributed Systems	Describe the scalability challenges associated with a service growing to accommodate many clients, as well as those associated with a service only transiently having many clients.
Distributed Systems	Give examples of problems for which consensus algorithms such as leader election are required.
Cloud Computing	Discuss the importance of elasticity and resource management in cloud computing.
Cloud Computing	Explain strategies to synchronize a common view of shared data across a collection of devices.
Cloud Computing	Explain the advantages and disadvantages of using virtualized infrastructure.
Cloud Computing	Deploy an application that uses cloud infrastructure for computing and/or data resources.
Cloud Computing	Appropriately partition an application between a client and resources.
Formal Models and Semantics	Model a concurrent process using a formal model, such as pi-calculus.
Formal Models and Semantics	Explain the characteristics of a particular formal parallel model.
Formal Models and Semantics	Formally model a shared memory system to show if it is consistent.
Formal Models and Semantics	Use a model to show progress guarantees in a parallel algorithm.
Formal Models and Semantics	Use formal techniques to show that a parallel algorithm is correct with respect to a safety or liveness property.
Formal Models and Semantics	Decide if a specific execution is linearizable or not.
Object-Oriented Programming	Design and implement a class.
Object-Oriented Programming	Use subclassing to design simple class hierarchies that allow code to be reused for distinct subclasses.
Object-Oriented Programming	Correctly reason about control flow in a program using dynamic dispatch.
Object-Oriented Programming	Compare and contrast (1) the procedural/functional approach—defining a function for each operation with the function body providing a case for each data variant—and (2) the object-oriented approach—defining a class for each data variant with the class definition providing a method for each operation  Understand both as defining a matrix of operations and variants.
Object-Oriented Programming	Explain the relationship between object-oriented inheritance (code-sharing and overriding) and subtyping (the idea of a subtype being usable in a context that expects the supertype).
Object-Oriented Programming	Use object-oriented encapsulation mechanisms such as interfaces and private members.
Object-Oriented Programming	Define and use iterators and other operations on aggregates, including operations that take functions as arguments, in multiple programming languages, selecting the most natural idioms for each language.
Functional Programming	Write basic algorithms that avoid assigning to mutable state or considering reference equality.
Functional Programming	Write useful functions that take and return other functions.
Functional Programming	Compare and contrast (1) the procedural/functional approach—defining a function for each operation with the function body providing a case for each data variant—and (2) the object-oriented approach—defining a class for each data variant with the class definition providing a method for each operation  Understand both as defining a matrix of operations and variants.
Functional Programming	Correctly reason about variables and lexical scope in a program using function closures.
Functional Programming	Use functional encapsulation mechanisms such as closures and modular interfaces.
Functional Programming	Define and use iterators and other operations on aggregates, including operations that take functions as arguments, in multiple programming languages, selecting the most natural idioms for each language.
Event-Driven and Reactive Programming	Write event handlers for use in reactive systems, such as GUIs.
Event-Driven and Reactive Programming	Explain why an event-driven programming style is natural in domains where programs react to external events.
Event-Driven and Reactive Programming	Describe an interactive system in terms of a model, a view, and a controller.
Basic Type Systems	For both a primitive and a compound type, informally describe the values that have that type.
Basic Type Systems	For a language with a static type system, describe the operations that are forbidden statically, such as passing the wrong type of value to a function or method.
Basic Type Systems	Describe examples of program errors detected by a type system.
Basic Type Systems	For multiple programming languages, identify program properties checked statically and program properties checked dynamically.
Basic Type Systems	Give an example program that does not type-check in a particular language and yet would have no error if run.
Basic Type Systems	Use types and type-error messages to write and debug programs.
Basic Type Systems	Explain how typing rules define the set of operations that are legal for a type.
Basic Type Systems	Write down the type rules governing the use of a particular compound type.
Basic Type Systems	Explain why undecidability requires type systems to conservatively approximate program behavior.
Basic Type Systems	Define and use program pieces (such as functions, classes, methods) that use generic types, including for collections.
Basic Type Systems	Discuss the differences among generics, subtyping, and overloading.
Basic Type Systems	Explain multiple benefits and limitations of static typing in writing, maintaining, and debugging software.
Program Representation	Explain how programs that process other programs treat the other programs as their input data.
Program Representation	Describe an abstract syntax tree for a small language.
Program Representation	Describe the benefits of having program representations other than strings of source code.
Program Representation	Write a program to process some representation of code for some purpose, such as an interpreter, an expression optimizer, or a documentation generator.
Language Translation and Execution	Distinguish a language definition (what constructs mean) from a particular language implementation (compiler vs interpreter, run-time representation of data objects, etc).
Language Translation and Execution	Distinguish syntax and parsing from semantics and evaluation.
Language Translation and Execution	Sketch a low-level run-time representation of core language constructs, such as objects or closures.
Language Translation and Execution	Explain how programming language implementations typically organize memory into global data, text, heap, and stack sections and how features such as recursion and memory management map to this memory model.
Language Translation and Execution	Identify and fix memory leaks and dangling-pointer dereferences.
Language Translation and Execution	Discuss the benefits and limitations of garbage collection, including the notion of reachability.
Syntax Analysis	Use formal grammars to specify the syntax of languages.
Syntax Analysis	Use declarative tools to generate parsers and scanners.
Syntax Analysis	Identify key issues in syntax definitions: ambiguity, associativity, precedence.
Compiler Semantic Analysis	Implement context-sensitive, source-level static analyses such as type-checkers or resolving identifiers to identify their binding occurrences.
Compiler Semantic Analysis	Describe semantic analyses using an attribute grammar.
Code Generation	Identify all essential steps for automatically converting source code into assembly or other low-level languages.
Code Generation	Generate the low-level code for calling functions/methods in modern languages.
Code Generation	Discuss why separate compilation requires uniform calling conventions.
Code Generation	Discuss why separate compilation limits optimization because of unknown effects of calls.
Code Generation	Discuss opportunities for optimization introduced by naive translation and approaches for achieving optimization, such as instruction selection, instruction scheduling, register allocation, and peephole optimization.
Runtime Systems	Compare the benefits of different memory-management schemes, using concepts such as fragmentation, locality, and memory overhead.
Runtime Systems	Discuss benefits and limitations of automatic memory management.
Runtime Systems	Explain the use of metadata in run-time representations of objects and activation records, such as class pointers, array lengths, return addresses, and frame pointers.
Runtime Systems	Discuss advantages, disadvantages, and difficulties of just-in-time and dynamic recompilation.
Runtime Systems	Identify the services provided by modern language run-time systems.
Static Analysis	Define useful static analyses in terms of a conceptual framework such as dataflow analysis.
Static Analysis	Explain why non-trivial sound static analyses must be approximate.
Static Analysis	Communicate why an analysis is correct (sound and terminating).
Static Analysis	Distinguish “may” and “must” analyses.
Static Analysis	Explain why potential aliasing limits sound program analysis and how alias analysis can help.
Static Analysis	Use the results of a static analysis for program optimization and/or partial program correctness.
Advanced Programming Constructs	Use various advanced programming constructs and idioms correctly.
Advanced Programming Constructs	Discuss how various advanced programming constructs aim to improve program structure, software quality, and programmer productivity.
Advanced Programming Constructs	Discuss how various advanced programming constructs interact with the definition and implementation of other language features.
Concurrency and Parallelism	Write correct concurrent programs using multiple programming models, such as shared memory, actors, futures, and data-parallelism primitives.
Concurrency and Parallelism	Use a message-passing model to analyze a communication protocol.
Concurrency and Parallelism	Explain why programming languages do not guarantee sequential consistency in the presence of data races and what programmers must do as a result.
Type Systems	Define a type system precisely and compositionally.
Type Systems	For various foundational type constructors, identify the values they describe and the invariants they enforce.
Type Systems	Precisely specify the invariants preserved by a sound type system.
Type Systems	Prove type safety for a simple language in terms of preservation and progress theorems.
Type Systems	Implement a unification-based type-inference algorithm for a simple language.
Type Systems	Explain how static overloading and associated resolution algorithms influence the dynamic behavior of programs.
Formal Semantics	Give a formal semantics for a small language.
Formal Semantics	Write a lambda-calculus program and show its evaluation to a normal form.
Formal Semantics	Discuss the different approaches of operational, denotational, and axiomatic semantics.
Formal Semantics	Use induction to prove properties of all programs in a language.
Formal Semantics	Use induction to prove properaties of all programs in a language that are well-typed according to a formally defined type system.
Formal Semantics	Use parametricity to establish the behavior of code given only its type.
Formal Semantics	Use formal semantics to build a formal model of a software system other than a programming language.
Language Pragmatics	Discuss the role of concepts such as orthogonality and well-chosen defaults in language design.
Language Pragmatics	Use crisp and objective criteria for evaluating language-design decisions.
Language Pragmatics	Give an example program whose result can differ under different rules for evaluation order, precedence, or associativity.
Language Pragmatics	Show uses of delayed evaluation, such as user-defined control abstractions.
Language Pragmatics	Discuss the need for allowing calls to external calls and system libraries and the consequences for language implementation.
Logic Programming	Use a logic language to implement a conventional algorithm.
Logic Programming	Use a logic language to implement an algorithm employing implicit search using clauses, relations, and cuts.
Algorithms and Design	Discuss the importance of algorithms in the problem-solving process.
Algorithms and Design	Discuss how a problem may be solved by multiple algorithms, each with different properties.
Algorithms and Design	Create algorithms for solving simple problems.
Algorithms and Design	Use a programming language to implement, test, and debug algorithms for solving simple problems.
Algorithms and Design	Implement, test, and debug simple recursive functions and procedures.
Algorithms and Design	Determine whether a recursive or iterative solution is most appropriate for a problem.
Algorithms and Design	Implement a divide-and-conquer algorithm for solving a problem.
Algorithms and Design	Apply the techniques of decomposition to break a program into smaller pieces.
Algorithms and Design	Identify the data components and behaviors of multiple abstract data types.
Algorithms and Design	Implement a coherent abstract data type, with loose coupling between components and behaviors.
Algorithms and Design	Identify the relative strengths and weaknesses among multiple designs or implementations for a problem.
Fundamental Programming Concepts	Analyze and explain the behavior of simple programs involving the fundamental programming constructs variables, expressions, assignments, I/O, control constructs, functions, parameter passing, and recursion. 
Fundamental Programming Concepts	Identify and describe uses of primitive data types.
Fundamental Programming Concepts	Write programs that use primitive data types.
Fundamental Programming Concepts	Modify and expand short programs that use standard conditional and iterative control structures and functions.
Fundamental Programming Concepts	Design, implement, test, and debug a program that uses each of the following fundamental programming constructs: basic computation, simple I/O, standard conditional and iterative structures, the definition of functions, and parameter passing.
Fundamental Programming Concepts	Write a program that uses file I/O to provide persistence across multiple executions.
Fundamental Programming Concepts	Choose appropriate conditional and iteration constructs for a given programming task.
Fundamental Programming Concepts	Describe the concept of recursion and give examples of its use.
Fundamental Programming Concepts	Identify the base case and the general case of a recursively-defined problem.
Fundamental Data Structures	Discuss the appropriate use of built-in data structures.
Fundamental Data Structures	Describe common applications for each  of the following data structures: stack, queue, priority queue, set, and map. 
Fundamental Data Structures	Write programs that use each of the following data structures: arrays, records/structs, strings, linked lists, stacks, queues, sets, and maps.
Fundamental Data Structures	Compare alternative implementations of data structures with respect to performance.
Fundamental Data Structures	Describe how references allow for objects to be accessed in multiple ways.
Fundamental Data Structures	Compare and contrast the costs and benefits of dynamic and static data structure implementations.
Fundamental Data Structures	Choose the appropriate data structure for modeling a given problem.
Development Methods	Trace the execution of a variety of code segments and write summaries of their computations.
Development Methods	Explain why the creation of correct program components is important in the production of high-quality software.
Development Methods	Identify common coding errors that lead to insecure programs (eg, buffer overflows, memory leaks, malicious code) and apply strategies for avoiding such errors.
Development Methods	Conduct a personal code review (focused on common coding errors) on a program component using a provided checklist.
Development Methods	Contribute to a small-team code review focused on component correctness.
Development Methods	Describe how a contract can be used to specify the behavior of a program component.
Development Methods	Refactor a program by identifying opportunities to apply procedural abstraction.
Development Methods	Apply a variety of strategies to the testing and debugging of simple programs.
Development Methods	Construct, execute and debug programs using a modern IDE and associated tools such as unit testing tools and visual debuggers.
Development Methods	Construct and debug programs using the standard libraries available with a chosen programming language.
Development Methods	Analyze the extent to which another programmer’s code meets documentation and programming style standards.
Development Methods	Apply consistent documentation and program style standards that contribute to the readability and maintainability of software.
Software Processes	Describe how software can interact with and participate in various systems including information management, embedded, process control, and communications systems.
Software Processes	Describe the relative advantages and disadvantages among  several  major process models (eg, waterfall, iterative, and agile).
Software Processes	Describe the different practices that are key components of various process models.
Software Processes	Differentiate among the phases of software development.
Software Processes	Describe how programming in the large differs from individual efforts with respect to understanding a large code base, code reading, understanding builds, and understanding context of changes.
Software Processes	Explain the concept of a software lifecycle and provide an example, illustrating its phases including the deliverables that are produced.
Software Processes	Compare several common process models with respect to their value for development of particular classes of software systems taking into account issues such as requirement stability, size, and non-functional characteristics.
Software Processes	Define software quality and describe the role of quality assurance activities in the software process.
Software Processes	Describe the intent and fundamental similarities among process improvement approaches.
Software Processes	Compare several process improvement models such as CMM, CMMI, CQI, Plan-Do-Check-Act, or ISO9000.
Software Processes	Assess a development effort and recommend potential changes by participating in process improvement (using a model such as PSP) or engaging in a project retrospective.
Software Processes	Explain the role of process maturity models in process improvement.
Software Processes	Describe several process metrics for assessing and controlling a project.
Software Processes	Use project metrics to describe the current state of a project.
Software Project Management	Discuss common behaviors that contribute to the effective functioning of a team.
Software Project Management	Create and follow an agenda for a team meeting.
Software Project Management	Identify and justify necessary roles in a software development team.
Software Project Management	Understand the sources, hazards, and potential benefits of team conflict.
Software Project Management	Apply a conflict resolution strategy in a team setting.
Software Project Management	Use an ad hoc method to estimate software development effort (eg, time) and compare to actual effort required.
Software Project Management	List several examples of software risks.
Software Project Management	Describe the impact of risk in a software development lifecycle.
Software Project Management	Describe different categories of risk in software systems.
Software Project Management	Demonstrate through involvement in a team project the central elements of team building and team management.
Software Project Management	Describe how the choice of process model affects team organizational structures and decision-making processes.
Software Project Management	Create a team by identifying appropriate roles and assigning roles to team members.
Software Project Management	Assess and provide feedback to teams and individuals on their performance in a team setting.
Software Project Management	Using a particular software process, describe the aspects of a project that need to be planned and monitored, (eg, estimates of size and effort, a schedule, resource allocation, configuration control, change management, and project risk identification and management).
Software Project Management	Track the progress of some stage in a project using appropriate project metrics.
Software Project Management	Compare simple software size and cost estimation techniques.
Software Project Management	Use a project management tool to assist in the assignment and tracking of tasks in a software development project.
Software Project Management	Describe the impact of risk tolerance on the software development process.
Software Project Management	Identify risks and describe approaches to managing risk (avoidance, acceptance, transference, mitigation), and characterize the strengths and shortcomings of each.
Software Project Management	Explain how risk affects decisions in the software development process.
Software Project Management	Identify security risks for a software system.
Software Project Management	Demonstrate a systematic approach to the task of identifying hazards and risks in a particular situation.
Software Project Management	Apply the basic principles of risk management in a variety of simple scenarios including a security situation.
Software Project Management	Conduct a cost/benefit analysis for a risk mitigation approach.
Software Project Management	Identify and analyze some of the risks for an entire system that arise from aspects other than the software.
Tools and Environments	Describe the difference between centralized and distributed software configuration management.
Tools and Environments	Describe how version control can be used to help manage software release management.
Tools and Environments	Identify configuration items and use a source code control tool in a small team-based project.
Tools and Environments	Describe how available static and dynamic test tools can be integrated into the software development environment.
Tools and Environments	Describe the issues that are important in selecting a set of tools for the development of a particular software system, including tools for requirements tracking, design modeling, implementation, build automation, and testing.
Tools and Environments	Demonstrate the capability to use software tools in support of the development of a software product of medium size.
Requirements Engineering	List the key components of a use case or similar description of some behavior that is required for a system.
Requirements Engineering	Describe how the requirements engineering process supports the elicitation and validation of behavioral requirements.
Requirements Engineering	Interpret a given requirements model for a simple software system.
Requirements Engineering	Describe the fundamental challenges of and common techniques used for requirements elicitation.
Requirements Engineering	List the key components of a data model (eg, class diagrams or ER diagrams).
Requirements Engineering	Identify both functional and non-functional requirements in a given requirements specification for a software system.
Requirements Engineering	Conduct a review of a set of software requirements to determine the quality of the requirements with respect to the characteristics of good requirements.
Requirements Engineering	Apply key elements and common methods for elicitation and analysis to produce a set of software requirements for a medium-sized software system.
Requirements Engineering	Compare the plan-driven and agile approaches to requirements specification and validation and describe the benefits and risks associated with each.
Requirements Engineering	Use a common, non-formal method to model and specify the requirements for a medium-size software system.
Requirements Engineering	Translate into natural language a software requirements specification (eg, a software component contract) written in a formal specification language.
Requirements Engineering	Create a prototype of a software system to mitigate risk in requirements.
Requirements Engineering	Differentiate between forward and backward tracing and explain their roles in the requirements validation process.
Software Design	Articulate design principles including separation of concerns, information hiding, coupling and cohesion, and encapsulation.
Software Design	Use a design paradigm to design a simple software system, and explain how system design principles have been applied in this design.
Software Design	Construct models of the design of a simple software system that are appropriate for the paradigm used to design it.
Software Design	Within the context of a single design paradigm, describe one or more design patterns that could be applicable to the design of a simple software system.
Software Design	For a simple system suitable for a given scenario, discuss and select an appropriate design paradigm.
Software Design	Create appropriate models for the structure and behavior of software products from their requirements specifications.
Software Design	Explain the relationships between the requirements for a software product and its design, using appropriate models.
Software Design	For the design of a simple software system within the context of a single design paradigm, describe the software architecture of that system.
Software Design	Given a high-level design, identify the software architecture by differentiating among common software architectures such as 3-tier, pipe-and-filter, and client-server.
Software Design	Investigate the impact of software architectures selection on the design of a simple system.
Software Design	Apply simple examples of patterns in a software design.
Software Design	Describe a form of refactoring and discuss when it may be applicable.
Software Design	Select suitable components for use in the design of a software product.
Software Design	Explain how suitable components might need to be adapted for use in the design of a software product.
Software Design	Design a contract for a typical small software component for use in a given system.
Software Design	Discuss and select appropriate software architecture for a simple system suitable for a given scenario.
Software Design	Apply models for internal and external qualities in designing software components to achieve an acceptable tradeoff between conflicting quality aspects.
Software Design	Analyze a software design from the perspective of a significant internal quality attribute.
Software Design	Analyze a software design from the perspective of a significant external quality attribute.
Software Design	Explain the role of objects in middleware systems and the relationship with components.
Software Design	Apply component-oriented approaches to the design of a range of software, such as using components for concurrency and transactions, for reliable communication services, for database interaction including services for remote query and database management, or for secure communication and access.
Software Design	Refactor an existing software implementation to improve some aspect of its design.
Software Design	State and apply the principles of least privilege and fail-safe defaults.
Software Construction	Describe techniques, coding idioms and mechanisms for implementing designs to achieve desired properties such as reliability, efficiency, and robustness.
Software Construction	Build robust code using exception handling mechanisms.
Software Construction	Describe secure coding and defensive coding practices.
Software Construction	Select and use a defined coding standard in a small software project.
Software Construction	Compare and contrast integration strategies including top-down, bottom-up, and sandwich integration.
Software Construction	Describe the process of analyzing and implementing changes to code base developed for a specific project.
Software Construction	Describe the process of analyzing and implementing changes to a large existing code base.
Software Construction	Rewrite a simple program to remove common vulnerabilities, such as buffer overflows, integer overflows and race conditions.
Software Construction	Write a software component that performs some non-trivial task and is resilient to input and run-time errors.
Software Verification Validation	Distinguish between program validation and verification.
Software Verification Validation	Describe the role that tools can play in the validation of software.
Software Verification Validation	Undertake, as part of a team activity, an inspection of a medium-size code segment.
Software Verification Validation	Describe and distinguish among the different types and levels of testing (unit, integration, systems, and acceptance).
Software Verification Validation	Describe techniques for identifying significant test cases for integration, regression and system testing.
Software Verification Validation	Create and document a set of tests for a medium-size code segment.
Software Verification Validation	Describe how to select good regression tests and automate them.
Software Verification Validation	Use a defect tracking tool to manage software defects in a small software project.
Software Verification Validation	Discuss the limitations of testing in a particular domain.
Software Verification Validation	Evaluate a test suite for a medium-size code segment.
Software Verification Validation	Compare static and dynamic approaches to verification.
Software Verification Validation	Identify the fundamental principles of test-driven development methods and explain the role of automated testing in these methods.
Software Verification Validation	Discuss the issues involving the testing of object-oriented software.
Software Verification Validation	Describe techniques for the verification and validation of non-code artifacts.
Software Verification Validation	Describe approaches for fault estimation.
Software Verification Validation	Estimate the number of faults in a small software application based on fault density and fault seeding.
Software Verification Validation	Conduct an inspection or review of software source code for a small or medium sized software project.
Software Evolution	Identify the principal issues associated with software evolution and explain their impact on the software lifecycle.
Software Evolution	Estimate the impact of a change request to an existing product of medium size.
Software Evolution	Use refactoring in the process of modifying a software component.
Software Evolution	Discuss the challenges of evolving systems in a changing environment.
Software Evolution	Outline the process of regression testing and its role in release management.
Software Evolution	Discuss the advantages and disadvantages of different types of software reuse.
Software Reliability	Explain the problems that exist in achieving very high levels of reliability.
Software Reliability	Describe how software reliability contributes to system reliability.
Software Reliability	List approaches to minimizing faults that can be applied at each stage of the software lifecycle.
Software Reliability	Compare the characteristics of three different reliability modeling approaches.
Software Reliability	Demonstrate the ability to apply multiple methods to develop reliability estimates for a software system.
Software Reliability	Identify methods that will lead to the realization of a software architecture that achieves a specified level of reliability.
Software Reliability	Identify ways to apply redundancy to achieve fault tolerance for a medium-sized application.
Formal Methods	Describe the role formal specification and analysis techniques can play in the development of complex software and compare their use as validation and verification techniques with testing.
Formal Methods	Apply formal specification and analysis techniques to software designs and programs with low complexity.
Formal Methods	Explain the potential benefits and drawbacks of using formal specification languages.
Formal Methods	Create and evaluate program assertions for a variety of behaviors ranging from simple through complex.
Formal Methods	Using a common formal specification language, formulate the specification of a simple software system and derive examples of test cases from the specification.
Computational Paradigms	List commonly encountered patterns of how computations are organized.
Computational Paradigms	Describe the basic building blocks of computers and their role in the historical development of computer architecture.
Computational Paradigms	Articulate the differences between single thread vs multiple thread, single server vs multiple server models, motivated by real world examples (eg, cooking recipes, lines for multiple teller machines and couples shopping for food).
Computational Paradigms	Articulate the concept of strong vs weak scaling, ie, how performance is affected by scale of problem vs scale of resources to solve the problem This can be motivated by the simple, real-world examples.
Computational Paradigms	Design a simple logic circuit using the fundamental building blocks of logic design.
Computational Paradigms	Use tools for capture, synthesis, and simulation to evaluate a logic design.
Computational Paradigms	Write a simple sequential problem and a simple parallel version of the same program.
Computational Paradigms	Evaluate performance of simple sequential and parallel versions of a program with different problem sizes, and be able to describe the speed-ups achieved.
Cross-Layer Communications	Describe how computing systems are constructed of layers upon layers, based on separation of concerns, with well-defined interfaces, hiding details of low layers from the higher layers.
Cross-Layer Communications	Describe that hardware, VM, OS, application are additional layers of interpretation/processing.
Cross-Layer Communications	Describe the mechanisms of how errors are detected, signaled back, and handled through the layers.
Cross-Layer Communications	Construct a simple program using methods of layering, error detection and recovery, and reflection of error status across layers.
Cross-Layer Communications	Find bugs in a layered program by using tools for program tracing, single stepping, and debugging.
State and State Machines	Describe computations as a system characyterized by a known set of configurations with transitions from one unique configuration (state) to another (state).
State and State Machines	Describe the distinction between systems whose output is only a function of their input (Combinational) and those with memory/history (Sequential).
State and State Machines	Describe a computer as a state machine that interprets machine instructions.
State and State Machines	Explain how a program or network protocol can also be expressed as a state machine, and that alternative representations for the same computation can exist.
State and State Machines	Develop state machine descriptions for simple problem statement solutions (eg, traffic light sequencing, pattern recognizers).
State and State Machines	Derive time-series behavior of a state machine from its state machine representation.
Parallelism	For a given program, distinguish between its sequential and parallel execution, and the performance implications thereof.
Parallelism	Demonstrate on an execution time line that parallelism events and operations can take place simultaneously (ie, at the same time) Explain how work can be performed in less elapsed time if this can be exploited.
Parallelism	Explain other uses of parallelism, such as for reliability/redundancy of execution.
Parallelism	Define the differences between the concepts of Instruction Parallelism, Data Parallelism, Thread Parallelism/Multitasking, Task/Request Parallelism.
Parallelism	Write more than one parallel program (eg, one simple parallel program in more than one parallel programming paradigm; a simple parallel program that manages shared resources through synchronization primitives; a simple parallel program that performs simultaneous operation on partitioned data through task parallel (eg, parallel search terms; a simple parallel program that performs step-by-step pipeline processing through message passing).
Parallelism	Use performance tools to measure speed-up achieved by parallel programs in terms of both problem size and number of resources.
Evaluation	Explain how the components of system architecture contribute to improving its performance.
Evaluation	Describe Amdahl’s law and discuss its limitations.
Evaluation	Design and conduct a performance-oriented experiment.
Evaluation	Use software tools to profile and measure program performance.
Resource Allocation and Scheduling	Define how finite computer resources (eg, processor share, memory,  storage and network bandwidth) are managed by their careful allocation to existing entities.
Resource Allocation and Scheduling	Describe the scheduling algorithms by which resources are allocated to competing entities, and the figures of merit by which these algorithms are evaluated, such as fairness.
Resource Allocation and Scheduling	Implement simple schedule algorithms.
Resource Allocation and Scheduling	Use figures of merit of alternative scheduler implementations.
Proximity	Explain the importance of locality in determining performance.
Proximity	Describe why things that are close in space take less time to access.
Proximity	Calculate average memory access time and describe the tradeoffs in memory hierarchy performance in terms of capacity, miss/hit rate, and access time.
Virtualization and Isolation	Explain why it is important to isolate and protect the execution of individual programs and environments that share common underlying resources.
Virtualization and Isolation	Describe how the concept of indirection can create the illusion of a dedicated machine and its resources even when physically shared among multiple programs and environments.
Virtualization and Isolation	Measure the performance of two application instances running on separate virtual machines, and determine the effect of performance isolation.
Reliability through Redundancy	Explain the distinction between program errors, system errors, and hardware faults (eg, bad memory) and exceptions (eg, attempt to divide by zero).
Reliability through Redundancy	Articulate the distinction between detecting, handling, and recovering from faults, and the methods for their implementation.
Reliability through Redundancy	Describe the role of error correcting codes in providing error checking and correction techniques in memories, storage, and networks.
Reliability through Redundancy	Apply simple algorithms for exploiting redundant information for the purposes of data correction.
Reliability through Redundancy	Compare different error detection and correction methods for their data overhead, implementation complexity, and relative execution time for encoding, detecting, and correcting errors.
Quantitative Evaluation	Explain the circumstances in which a given figure of system performance metric is useful.
Quantitative Evaluation	Explain the inadequacies of benchmarks as a measure of system performance.
Quantitative Evaluation	Use limit studies or simple calculations to produce order-of-magnitude estimates for a given performance metric in a given context.
Quantitative Evaluation	Conduct a performance experiment on a layered system to determine the effect of a system parameter on figure of system performance.
Social Context	Describe positive and negative ways in which computer technology (networks, mobile computing, cloud computing) alters modes of social interaction at the personal level.
Social Context	Identify developers’ assumptions and values embedded in hardware and software design, especially as they pertain to usability for diverse populations including under-represented populations and the disabled.
Social Context	Interpret the social context of a given design and its implementation.
Social Context	Evaluate the efficacy of a given design and implementation using empirical data.
Social Context	Summarize the implications of social media on individualism versus collectivism and culture.
Social Context	Discuss how Internet access serves as a liberating force for people living under oppressive forms of government; explain how limits on Internet access are used as tools of political and social repression.
Social Context	Analyze the pros and cons of reliance on computing in the implementation of democracy (eg delivery of social services, electronic voting).
Social Context	Describe the impact of the under-representation of diverse populations in the computing profession (eg, industry culture, product diversity).
Social Context	Explain the implications of context awareness in ubiquitous computing systems.
Analytical Tools	Evaluate stakeholder positions in a given situation.
Analytical Tools	Analyze basic logical fallacies in an argument.
Analytical Tools	Analyze an argument to identify premises and conclusion.
Analytical Tools	Illustrate the use of example and analogy in ethical argument.
Analytical Tools	Evaluate ethical/social tradeoffs in technical decisions.
Professional Ethics	Identify ethical issues that arise in software development and determine how to address them technically and ethically.
Professional Ethics	Explain the ethical responsibility of ensuring software correctness, reliability and safety. 
Professional Ethics	Describe the mechanisms that typically exist for a professional to keep up-to-date.
Professional Ethics	Describe the strengths and weaknesses of relevant professional codes as expressions of professionalism and guides to decision-making.
Professional Ethics	Analyze a global computing issue, observing the role of professionals and government officials in managing this problem.
Professional Ethics	Evaluate the professional codes of ethics from the ACM, the IEEE Computer Society, and other organizations.
Professional Ethics	Describe ways in which professionals may contribute to public policy.
Professional Ethics	Describe the consequences of inappropriate professional behavior.
Professional Ethics	Identify progressive stages in a whistle-blowing incident.
Professional Ethics	Identify examples of how regional culture interplays with ethical dilemmas.
Professional Ethics	Investigate forms of harassment and discrimination and avenues of assistance.
Professional Ethics	Examine various forms of professional credentialing.
Professional Ethics	Explain the relationship between ergonomics in computing environments and people’s health.
Professional Ethics	Develop a computer usage/acceptable use policy with enforcement measures.
Professional Ethics	Describe issues associated with industries’ push to focus on time to market versus enforcing quality professional standards.
Intellectual Property	Discuss the philosophical bases of intellectual property.
Intellectual Property	Discuss the rationale for the legal protection of intellectual property.
Intellectual Property	Describe legislation aimed at digital copyright infringements.
Intellectual Property	Critique legislation aimed at digital copyright infringements.
Intellectual Property	Identify contemporary examples of intangible digital intellectual property.
Intellectual Property	Justify uses of copyrighted materials.
Intellectual Property	Evaluate the ethical issues inherent in various plagiarism detection mechanisms.
Intellectual Property	Interpret the intent and implementation of software licensing.
Intellectual Property	Discuss the issues involved in securing software patents.
Intellectual Property	Characterize and contrast the concepts of copyright, patenting and trademarks.
Intellectual Property	Identify the goals of the open source movement.
Intellectual Property	Identify the global nature of software piracy.
Privacy and Civil Liberties	Discuss the philosophical basis for the legal protection of personal privacy.
Privacy and Civil Liberties	Evaluate solutions to privacy threats in transactional databases and data warehouses.
Privacy and Civil Liberties	Describe the role of data collection in the implementation of pervasive surveillance systems (e.g., RFID, face recognition, toll collection, mobile computing). 
Privacy and Civil Liberties	Describe the ramifications of differential privacy. 
Privacy and Civil Liberties	Investigate the impact of technological solutions to privacy problems.
Privacy and Civil Liberties	Critique the intent, potential value and implementation of various forms of privacy legislation.
Privacy and Civil Liberties	Identify strategies to enable appropriate freedom of expression.
Professional Communication	Write clear, concise, and accurate technical documents following well-defined standards for format and for including appropriate tables, figures, and references.
Professional Communication	Evaluate written technical documentation to detect problems of various kinds.
Professional Communication	Develop and deliver a good quality formal presentation.
Professional Communication	Plan interactions (eg virtual, face-to-face, shared documents) with others in which they are able to get their point across, and are also able to listen carefully and appreciate the points of others, even when they disagree, and are able to convey to others that they have heard.
Professional Communication	Describe the strengths and weaknesses of various forms of communication (eg virtual, face-to-face, shared documents).
Professional Communication	Examine appropriate measures used to communicate with stakeholders involved in a project.
Professional Communication	Compare and contrast various collaboration tools.
Professional Communication	Discuss ways to influence performance and results in cross-cultural teams.
Professional Communication	Examine the tradeoffs and common sources of risk in software projects regarding technology, structure/process, quality, people, market and financial.
Professional Communication	Evaluate personal strengths and weaknesses to work remotely as part of a multinational team.
Sustainability	Identify ways to be a sustainable practitioner.
Sustainability	Illustrate global social and environmental impacts of computer use and disposal (e-waste).
Sustainability	Describe the environmental impacts of design choices within the field of computing that relate to algorithm design, operating system design, networking design, database design, etc.
Sustainability	Investigate the social and environmental impacts of new system designs through projects.
Sustainability	Identify guidelines for sustainable IT design or deployment.
Sustainability	List the sustainable effects of telecommuting or web shopping.
Sustainability	Investigate pervasive computing in areas such as smart energy systems, social networking, transportation, agriculture, supply-chain systems, environmental monitoring and citizen activism.
Sustainability	Develop applications of computing and assess through research areas pertaining to environmental issues (eg energy, pollution, resource usage, recycling and reuse, food management, farming).
History	Identify significant continuing trends in the history of the computing field.
History	Identify the contributions of several pioneers in the computing field.
History	Discuss the historical context for several programming language paradigms.
History	Compare daily life before and after the advent of personal computers and the Internet.
Economies of Computing	Summarize the rationale for antimonopoly efforts.
Economies of Computing	Identify several ways in which the information technology industry is affected by shortages in the labor supply.
Economies of Computing	Identify the evolution of pricing strategies for computing goods and services.
Economies of Computing	Discuss the benefits, the drawbacks and the implications of off-shoring and outsourcing.
Economies of Computing	Investigate and defend ways to address limitations on access to computing.
Economies of Computing	Describe the economic benefits of network effects.
Security Policies, Laws and Computer Crimes	List classic examples of computer crimes and social engineering incidents with societal impact.
Security Policies, Laws and Computer Crimes	Identify laws that apply to computer crimes.
Security Policies, Laws and Computer Crimes	Describe the motivation and  ramifications of cyber terrorism and criminal hacking.
Security Policies, Laws and Computer Crimes	Examine the ethical and legal issues surrounding the misuse of access and various breaches in security.
Security Policies, Laws and Computer Crimes	Discuss the professional's role in security and the trade-offs involved.
Security Policies, Laws and Computer Crimes	Investigate measures that can be taken by both individuals and organizations including governments to prevent or mitigate the undesirable effects of computer crimes and identity theft.
Security Policies, Laws and Computer Crimes	Write a company-wide security policy, which includes procedures for managing passwords and employee monitoring.
